[{"path":"/articles/CropData.html","id":"getcrops","dir":"Articles","previous_headings":"","what":"getCrops()","title":"CropData","text":"getCrops() returns demonstrates usage getCrops() function icardaFIGSr package. function retrieves list crops corresponding codes ICARDA web service. However, demonstration purposes, mock API call avoid external dependencies vignette rendering.","code":"icardaFIGSr::getCrops() #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found #>    CropCode             CropName #> 1      ICAG             Aegilops #> 2       ICB               Barley #> 3      ICBW          Bread wheat #> 4       ILC             Chickpea #> 5      ICDW          Durum wheat #> 6       ILB            Faba bean #> 7       BPL        Faba bean BPL #> 8      IFMI     Forage and range #> 9      IFLA             Lathyrus #> 10      ILL               Lentil #> 11     IFMA      Medicago annual #> 12       IC  Not mandate cereals #> 13     IFPI                Pisum #> 14     ICPW      Primitive wheat #> 15     IFTR            Trifolium #> 16     IFVI                Vicia #> 17     ICWH        Wheat hybrids #> 18     ICWW Wheat wild relatives #> 19     ILWC           Wild Cicer #> 20     ICWB         Wild Hordeum #> 21     ILWL            Wild Lens #> 22     ICWT        Wild Triticum"},{"path":"/articles/CropData.html","id":"getcroptraits","dir":"Articles","previous_headings":"","what":"getCropTraits()","title":"CropData","text":"getCropTraits() returns dataframe specified crop describing available traits. example, function returns around 50 recorded unique traits barley bread wheat. Id: unique identifier trait associated crop. Trait: characteristic measured observed crop (e.g., “Days heading” “kernel row number”). Options: possible values column levels trait (e.g., “1-Narrow;2-Medium;3-Large” Flag leaf width trait). Field: abbreviated name trait.  Running function prompt enter user name password. generate typical output function.  Note crop name written lowercase within getCropTraits() compared crop names dataframe returned getCrops().important consider using output later function within former function.","code":"# Create a example data of barley Barley <- data.frame(   Id = c(1, 2, 3),   Trait = c(\"Flag leaf width[1-3 score]\", \"kernel row number\", \"Days to heading\"),   Options = c(\"1-Narrow;2-Medium;3-Large\", \"1-Six-rowed;2-Two-rowed;3-Two-rowed - rudimentary florets\", NA),   Field = c(\"FLWS\", \"RNO\", \"DHE\") )  #' \\dontrun{ #' Barley <- icardaFIGSr::getCropTrait(\"barley\") #'}  # print Barley Traits head(Barley) #>   Id                      Trait #> 1  1 Flag leaf width[1-3 score] #> 2  2          kernel row number #> 3  3            Days to heading #>                                                     Options Field #> 1                                 1-Narrow;2-Medium;3-Large  FLWS #> 2 1-Six-rowed;2-Two-rowed;3-Two-rowed - rudimentary florets   RNO #> 3                                                      <NA>   DHE # Create example data of breadwheat BreadWheat <- data.frame(   Id = c(1, 2, 3),   Trait = c(\"Plant height\", \"Seed shattering\", \"Growth habit\"),   Options = c(NA, \"1-Yes; 2-No\", \"1-Erect;2-Intermediate;3-Prostrate\"),   Field = c(\"PHT\", \"SDSHT\", \"GHA\") )  #' \\dontrun{ #' BreadWheat <- icardaFIGSr::getCropTrait(\"bread wheat\") #'}  # print BreadWheat Traits head(BreadWheat) #>   Id           Trait                            Options Field #> 1  1    Plant height                               <NA>   PHT #> 2  2 Seed shattering                        1-Yes; 2-No SDSHT #> 3  3    Growth habit 1-Erect;2-Intermediate;3-Prostrate   GHA"},{"path":"/articles/CropData.html","id":"getacessions","dir":"Articles","previous_headings":"","what":"getAcessions()","title":"CropData","text":"Definition Accession: distinct, uniquely identifiable sample seeds representing cultivar, breeding line population, maintained storage conservation use. Accession number: unique identifier assigned curator accession entered gene bank FAO getAccessions() returns data frame accessions specified crop. describe available columns output. IG: unique identifier germplasme. Crop: crop associated accessions (e.g., Barley). Country: country sample collected (e.g., Morroco-MAR). PopulationType: Type population (e.g., LA - Local). SiteCode: Code identifying specific site collection. Longitude: longitudinal coordinates site. Latitude: latitudinal coordinates site. Altitude: altitude collection site (available). Province: province sample collected. ADM1: Administrative division (state, region, territory). SITE: Name collection site. CollectionYear: Year sample collected.  get real accessions data, need credentials keys : username password, usually provided GRS-ICARDA department. simulate standard structure barley accessions data. output data can used explore available accessions given crop interest. learn accessions, can visualize counts across countries spatial distribution using ggplot2:ggplot() leaflet:leaflet() functions. learn history, can inspect data time using collectionYear column. can also used generate spatio-temporal animations leveraging R shiny() capabilities. Additionally, importantly, spatially referenced accessions can linked traits data sets IG conduct spatial analysis different scales, including limited , conducting spatial autocorrelation specific trait, spatial clustering given multiple traits, building Machine learning models, etc. examples discussed following sections. appropriate credentials, please run code . use leaflet() package visualize simulated accessions count. Accessions location counts explore count data time country using ggplot2::ggplot2() package. Accessions count time","code":"# Generate the dataset Barley_Acessions <- data.frame(   IG = 1:50,   Crop = rep(\"Barley\", 50),   Country = c(rep(\"MAR\",15),rep(\"MEX\",15), rep(\"AFG\",20)),   PopulationType = c(rep(\"LA\",15),rep(\"CV\", 15),rep(\"GS\", 20)),   SiteCode = paste(\"Code\",1:50),   Longitude= c(runif(15, min = -8.9566, max = 7),   # Morocco              runif(15, min = -103.35, max = -93.12),  # Mexico              runif(20, min = 62.20, max = 69.21)),   # Afghanistan   Latitude = c(runif(15, min = 31.63, max = 34.03),  # Morocco              runif(15, min = 16.75, max = 20.67),  # Mexico              runif(20, min = 31.61, max = 34.56)),   # Afghanistan   Altitude = runif(50, 0, 500),   Province = paste(\"Prov\",1:50),   ADM1 = paste(\"State_region\" ,1:50),   SITE = paste(\"Site_name_location\",1:50),   CollectionYear = runif(50,1900,2024) |> round() )  # View the dataset head(Barley_Acessions) #>   IG   Crop Country PopulationType SiteCode  Longitude Latitude Altitude #> 1  1 Barley     MAR             LA   Code 1 -7.6681024 32.73685 402.8400 #> 2  2 Barley     MAR             LA   Code 2  4.3565185 32.38658 407.0257 #> 3  3 Barley     MAR             LA   Code 3  0.6295012 32.04922 201.9555 #> 4  4 Barley     MAR             LA   Code 4 -6.4480878 32.90578 109.2155 #> 5  5 Barley     MAR             LA   Code 5 -8.8385301 32.81473 209.1807 #> 6  6 Barley     MAR             LA   Code 6 -1.5145455 33.50034 334.4354 #>   Province           ADM1                 SITE CollectionYear #> 1   Prov 1 State_region 1 Site_name_location 1           1987 #> 2   Prov 2 State_region 2 Site_name_location 2           1927 #> 3   Prov 3 State_region 3 Site_name_location 3           1990 #> 4   Prov 4 State_region 4 Site_name_location 4           1927 #> 5   Prov 5 State_region 5 Site_name_location 5           1957 #> 6   Prov 6 State_region 6 Site_name_location 6           1941 # You can run this code chunk if you have the necessary credentials #' @example #' \\dontrun{ #' Barley_Accessions <- icardaFIGSr::getAccessions(crop = \"barley\", #'                                        collectionYear = T, coor = TRUE) #'} library(leaflet)  leaflet(Barley_Acessions)%>%   addTiles()%>%   addCircleMarkers(lng = ~Longitude, lat = ~Latitude, color = \"red\",                label = ~Country,                clusterOptions = markerClusterOptions()) library(ggplot2)  ggplot(data = Barley_Acessions, aes(x=CollectionYear, fill=Country))+   geom_bar(position=\"dodge2\")"},{"path":"/articles/CropData.html","id":"mapaccessions","dir":"Articles","previous_headings":"","what":"mapAccessions()","title":"CropData","text":"mapAccessions() returns interactive map using accessions coordinates interest variable y. later can numeric character variable. function allow map accessions locations based given criteria specified y argument. example, use sodicityIndex PopulationType FIGS dataset.  dataset designed assist studies sodicity resistance wheat populations. integrates site-level information, including soil salinity sodicity measures (ESP ECE), altitude, climatic variables. sodicity index category offer consolidated view sodicity characteristics sample sites. details data source desribed icardaFIGSr::FIGS references.","code":""},{"path":"/articles/CropData.html","id":"accessions-withwithout-nas","dir":"Articles","previous_headings":"mapAccessions()","what":"Accessions with/without NA’s","title":"CropData","text":"","code":"FIGS <- icardaFIGSr::FIGS  # World Map showing locations of accessions icardaFIGSr::mapAccessions(df = FIGS,                            long = \"Longitude\", lat = \"Latitude\")"},{"path":"/articles/CropData.html","id":"accessions-by-sodocityindex","dir":"Articles","previous_headings":"mapAccessions()","what":"Accessions by SodocityIndex","title":"CropData","text":"","code":"# Map plotting locations of accessions with points coloured  # based on a gradient scale of SodicityIndex values icardaFIGSr::mapAccessions(FIGS, long = \"Longitude\",                            lat = \"Latitude\", y = \"SodicityIndex\")"},{"path":"/articles/CropData.html","id":"accessions-by-populationtype","dir":"Articles","previous_headings":"mapAccessions()","what":"Accessions by PopulationType","title":"CropData","text":"","code":"# Map plotting locations of accessions with points # coloured based on levels of y  icardaFIGSr::mapAccessions(FIGS, long = \"Longitude\",                            lat = \"Latitude\", y = \"PopulationType\")"},{"path":"/articles/CropData.html","id":"gettraitsdata","dir":"Articles","previous_headings":"","what":"getTraitsData()","title":"CropData","text":"getTraitsData() function returns data frame describes available accessions data corresponding measurements available traits. can take multiple accessions IGs ,one traitID time. Thus, can loop Trait IDs provided group accessions.  output list datasets, one trait. can used many ways highlight valuable insights support genetic resources conservation efforts available crops. One way , combine extracted traits, YEAR IGs one dataframe looping list. , use resulting data frame run multivariate analysis. add spatial context resulting dataframe Accessions_Traits dataset, can merge georeferenced accessions returned getAcessions function IGs crop.  describe process data retrieval final data set.","code":"# Load package library(tidyr) library(dplyr)  # Get Barleyacessions Barley_Accessions <- icardaFIGSr::getAccessions(crop = \"barley\",                                     collectionYear = TRUE, coor = TRUE)  IGs <- unique(Barley_Accessions$IG)  # Get Barley Traits Barley <- icardaFIGSr::getCropTraits(\"barley\") # Note that crop names are in lowercase here compared to getCrops() output. TraitID <- unique(Barley$ID)  # Subset some accessions and traits Some_Accessions <- IGs[1:10] Some_Traits <- TraitID[1:10]  # Initialize an empty list to store the results Barley_Accessions_Traits <- list()  # Loop through each TraitID for (trait_id in 1:length(Some_Traits)) {   # Extract trait data for the current TraitID   trait_data <- icardaFIGSr::getTraitsData(IG = Some_Accessions,                                 traitID = Some_Traits[trait_id])      # Check if the trait_data contains 'IG', 'YEAR' and a trait-specific          if (all(c(\"IG\", \"YEAR\") %in% colnames(trait_data))) {     # Extract 'IG', 'YEAR', and the last column (trait-specific column)     last_col <- colnames(trait_data)[ncol(trait_data)]          # Selected data     trait_data <- trait_data[ ,c(\"IG\",\"YEAR\", last_col)]          # add Trait_name column     trait_data$Trait_field <- last_col          # rename trait_value     colnames(trait_data) <- c(\"IG\",\"Year\",\"Trait_value\",\"Trait_field\")          if(nrow(trait_data)<1){       next     }   }   # Store the result in the list   Barley_Accessions_Traits[[as.character(trait_id)]] <- trait_data }  # Bind all datasets together (converting a list into a dataframe) Barley_Accessions_Traits <- do.call(rbind.data.frame,                                     Barley_Accessions_Traits)  # And finally, we can spread the traits as columns  Barley_Accessions_Traits <- Barley_Accessions_Traits%>%   tidyr::spread(value=\"Trait_value\", key=\"Trait_field\")  # Add coordinates Barley_Accessions_Traits <- Barley_Accessions%>%   dplyr::select(IG, Longitude, Latitude)%>%   merge(Barley_Accessions_Traits, by=\"IG\")  # Print Final table head(Barley_Accessions_Traits) # Run this code chunk if you have the necessary credentials #' @example #' \\dontrun{ #'  #' IGs <- unique(Barley_Accessions$IG) #' TraitID <- unique(Barley_Traits$ID) #'  #' # Subset some accessions by IG #' germplasme_samples <- IGs[1:10] #'  #' germplasme_Trait <- TraitID[1:10] #'  #' Barley_Traits_data <- icardaFIGSr::getTraitsData( #'         IG = germplasme_samples , traitID = germplasme_Trait[1]) #'}"},{"path":"/articles/CropData.html","id":"getonset","dir":"Articles","previous_headings":"","what":"getOnset()","title":"CropData","text":"getOnset function returns list 2 main datasets. first dataset contains site’s code first column 365 columns corresponding day year specified climate variables starting onset date. cv=TRUE,third dataset added final output contains coefficient variation interest variable.  , use site codes durumWC dataset, specify ICDW (durum wheat) crop code (use getCrops function list available cropCodes crop interest), specify appropriate climate variable : tavg, prec, rh (relative humidity). Please refer documentation using ?getOnset details.","code":"# call durumWC dataset data(\"durumWC\", package = \"icardaFIGSr\")  durumWC <- durumWC|>dplyr::ungroup()  # Make sure Sites is a character vector Sites <- as.character(unique(durumWC$SiteCode))  # Get onset data onset <- icardaFIGSr::getOnset(sites = Sites[1:2], crop = 'ICDW',                      var = c('tavg'), cv = T) #> Data loading started .... #> Loading completed! #> Using tavg as value column: use value.var to override.  # Get data frame with climatic variables from the list object  onset.clim <- onset[1]  # Get data frame with pheno variables from the list object onset.pheno <- onset[2]  onset.climcv <- onset[3]"},{"path":"/articles/CropData.html","id":"getgrowthperiod","dir":"Articles","previous_headings":"","what":"getGrowthPeriod()","title":"CropData","text":"getGrowthPeriod() function returns list three dataframes. Multiple examples provided section describe dataset output selected crops. Growth_Period : contains sitecode (referring available sites among specified sitecode argument), second column onset (days year, example : onset=150 means onset starts around Mai-June). remaining columns represent lengths growth stages (expressed days). sum growth stages equal last column, called Cycle.  growth stages named following abbreviation codes crop. glossary used growth stage codes corresponding names. output level, growth stages abbreviated names prefix “L” stands length. details, please refer getGrowthPeriod() documentation.","code":"growth_stages_codes <-  data.frame(   StageName = c(\"Heading begins\", \"Flowering begins\",                 \"Flowering complete\", \"50% Flowering Complete\",                 \"Grain fill begins\",                 \"Grain fill complete\",                 \"Seed fill\",\"Maturity\"),   StageCode = c(\"HB\",\"FB\",\"FC\",\"FC50\",\"GFB\",\"GFC\",\"SF\",\"M\") )  growth_stages_codes #>                StageName StageCode #> 1         Heading begins        HB #> 2       Flowering begins        FB #> 3     Flowering complete        FC #> 4 50% Flowering Complete      FC50 #> 5      Grain fill begins       GFB #> 6    Grain fill complete       GFC #> 7              Seed fill        SF #> 8               Maturity         M"},{"path":"/articles/CropData.html","id":"barley-crop","dir":"Articles","previous_headings":"getGrowthPeriod()","what":"Barley Crop","title":"CropData","text":"","code":"durumDaily <- icardaFIGSr::durumDaily  # Make sure that site codes are characters not factors Sites <- as.character(durumDaily$site_code)[1:10]  # Get growth period for barley with specified temperature range growth <- icardaFIGSr::getGrowthPeriod(sitecode = Sites,                              crop = 'Barley', base = 0,                              max = 25, gdd = TRUE) #> Data loading started .... #> Loading completed! #> Using tmin as value column: use value.var to override. #> Using tmax as value column: use value.var to override. #> Rows: 365 #> Columns: 12 #> Groups: sitecode [1] #> $ sitecode       <chr> \"TUR48::70\", \"TUR48::70\", \"TUR48::70\", \"TUR48::70\", \"TU… #> $ tmin           <dbl> 17.58235, 16.18235, 15.96471, 15.55294, 15.51471, 18.97… #> $ tmax           <dbl> 24.77647, 24.37941, 26.58235, 27.42941, 28.88529, 28.77… #> $ gdd            <dbl> 21.17941, 20.28088, 21.27353, 21.49117, 22.20000, 23.87… #> $ cumgdd         <dbl> 21.17941, 41.46029, 62.73382, 84.22500, 106.42499, 130.… #> $ DAP            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … #> $ onset          <int> 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, … #> $ heading        <int> 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9… #> $ flower_beg     <int> 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,… #> $ flower_end     <int> 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,… #> $ grain_fill_beg <int> 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,… #> $ grain_fill_end <int> 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,… #> # A tibble: 365 × 12 #> # Groups:   sitecode [1] #>    sitecode   tmin  tmax   gdd cumgdd   DAP onset heading flower_beg flower_end #>    <chr>     <dbl> <dbl> <dbl>  <dbl> <int> <int>   <int>      <int>      <int> #>  1 TUR48::70  17.6  24.8  21.2   21.2     1   277       9         18         27 #>  2 TUR48::70  16.2  24.4  20.3   41.5     2   277       9         18         27 #>  3 TUR48::70  16.0  26.6  21.3   62.7     3   277       9         18         27 #>  4 TUR48::70  15.6  27.4  21.5   84.2     4   277       9         18         27 #>  5 TUR48::70  15.5  28.9  22.2  106.      5   277       9         18         27 #>  6 TUR48::70  19.0  28.8  23.9  130.      6   277       9         18         27 #>  7 TUR48::70  16.8  24.9  20.8  151.      7   277       9         18         27 #>  8 TUR48::70  16.4  26.0  21.2  172.      8   277       9         18         27 #>  9 TUR48::70  16.0  26.5  21.3  194.      9   277       9         18         27 #> 10 TUR48::70  14.3  26.6  20.4  214.     10   277       9         18         27 #> # ℹ 355 more rows #> # ℹ 2 more variables: grain_fill_beg <int>, grain_fill_end <int> # Check results of growth period head(growth$Growth_Period) #>    sitecode onset  HB  FB  FC GFB GFC Cycle #> 1 TUR48::70   277 182 193 202 217 247  1041"},{"path":"/articles/CropData.html","id":"durum-wheat","dir":"Articles","previous_headings":"getGrowthPeriod()","what":"Durum wheat","title":"CropData","text":"Please uncomment run code chunk get datasets Durum wheat.","code":"# Make sure that site codes are characters not factors # Sites <- as.character(durumDaily$site_code)[1:3]  # Get growth period for durum wheat with specified temperature range # growth <- icardaFIGSr::getGrowthPeriod(sitecode = Sites, #                             crop = 'Durum wheat', base = 0, #                             max = 25, gdd = TRUE)  # Check results of growth period # head(growth$Growth_Period)"},{"path":"/articles/CropData.html","id":"lentil-crop","dir":"Articles","previous_headings":"getGrowthPeriod()","what":"Lentil Crop","title":"CropData","text":"Growing_Degree_Days : represents sitecodes, temperature ranges, calculated growing degree days gdd, cumulatives cumgdd corresponding days planting.","code":"# Make sure that site codes are characters not factors Sites <- as.character(durumDaily$site_code)[20:30]  # Get growth period for lentil with specified temperature range growth <- icardaFIGSr::getGrowthPeriod(sitecode = Sites,                              crop = 'Lentil', base = 0,                              max = 25, gdd = TRUE) #> Data loading started .... #> Loading completed! #> Using tmin as value column: use value.var to override. #> Using tmax as value column: use value.var to override. #> Rows: 365 #> Columns: 11 #> Groups: sitecode [1] #> $ sitecode     <chr> \"YEM80-1:130\", \"YEM80-1:130\", \"YEM80-1:130\", \"YEM80-1:130… #> $ tmin         <dbl> 17.81177, 17.84706, 18.04706, 18.02941, 18.40000, 18.5588… #> $ tmax         <dbl> 25.80294, 26.56471, 26.74706, 27.45588, 27.53235, 27.7470… #> $ gdd          <dbl> 21.80736, 22.20589, 22.39706, 22.74264, 22.96617, 23.1529… #> $ cumgdd       <dbl> 21.80736, 44.01324, 66.41030, 89.15295, 112.11912, 135.27… #> $ DAP          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… #> $ onset        <int> 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 25… #> $ flower_beg   <int> 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 4… #> $ `flower_50%` <int> 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 6… #> $ seed_fill    <int> 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 7… #> $ maturity     <int> 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 11… #> # A tibble: 365 × 11 #> # Groups:   sitecode [1] #>    sitecode     tmin  tmax   gdd cumgdd   DAP onset flower_beg `flower_50%` #>    <chr>       <dbl> <dbl> <dbl>  <dbl> <int> <int>      <int>        <int> #>  1 YEM80-1:130  17.8  25.8  21.8   21.8     1   253         49           62 #>  2 YEM80-1:130  17.8  26.6  22.2   44.0     2   253         49           62 #>  3 YEM80-1:130  18.0  26.7  22.4   66.4     3   253         49           62 #>  4 YEM80-1:130  18.0  27.5  22.7   89.2     4   253         49           62 #>  5 YEM80-1:130  18.4  27.5  23.0  112.      5   253         49           62 #>  6 YEM80-1:130  18.6  27.7  23.2  135.      6   253         49           62 #>  7 YEM80-1:130  19.3  27.3  23.3  159.      7   253         49           62 #>  8 YEM80-1:130  19.1  29.8  24.5  183.      8   253         49           62 #>  9 YEM80-1:130  19.0  27.7  23.4  206.      9   253         49           62 #> 10 YEM80-1:130  18.8  29.1  24.0  230.     10   253         49           62 #> # ℹ 355 more rows #> # ℹ 2 more variables: seed_fill <int>, maturity <int> # Check results of growing degree days head(growth$Growing_Degree_Days) #> # A tibble: 6 × 6 #> # Groups:   sitecode [1] #>   sitecode     tmin  tmax   gdd cumgdd   DAP #>   <chr>       <dbl> <dbl> <dbl>  <dbl> <int> #> 1 YEM80-1:130  17.8  25.8  21.8   21.8     1 #> 2 YEM80-1:130  17.8  26.6  22.2   44.0     2 #> 3 YEM80-1:130  18.0  26.7  22.4   66.4     3 #> 4 YEM80-1:130  18.0  27.5  22.7   89.2     4 #> 5 YEM80-1:130  18.4  27.5  23.0  112.      5 #> 6 YEM80-1:130  18.6  27.7  23.2  135.      6"},{"path":"/articles/CropData.html","id":"chickpea-crop","dir":"Articles","previous_headings":"getGrowthPeriod()","what":"Chickpea Crop","title":"CropData","text":"Onset_Data : represents sitecode, onset growth stages sites available specified crop.  Note growth stages Onset_Data dataset full names compared Growth_Period dataset.","code":"# Make sure that site codes are characters not factors Sites <- FIGS[grep(\"MAR|IND\", as.character(FIGS$SiteCode)), ]  Sites <- as.character(Sites$SiteCode)  # Get growth period for chickpeae with specified temperature range growth <- icardaFIGSr::getGrowthPeriod(sitecode = Sites,                              crop = 'Chickpea', base = 0,                              max = 25, gdd = TRUE) #> Data loading started .... #> Loading completed! #> Using tmin as value column: use value.var to override. #> Using tmax as value column: use value.var to override. #> Rows: 365 #> Columns: 11 #> Groups: sitecode [1] #> $ sitecode       <chr> \"IND::6\", \"IND::6\", \"IND::6\", \"IND::6\", \"IND::6\", \"IND:… #> $ tmin           <dbl> 22.91471, 21.57059, 21.84706, 21.07647, 19.90882, 20.33… #> $ tmax           <dbl> 31.98529, 31.42353, 33.10588, 33.29412, 33.71471, 34.24… #> $ gdd            <dbl> 27.45000, 26.49706, 27.47647, 27.18529, 26.81176, 27.28… #> $ cumgdd         <dbl> 27.45000, 53.94706, 81.42353, 108.60882, 135.42059, 162… #> $ DAP            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … #> $ onset          <int> 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, … #> $ flower_beg     <int> 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, … #> $ flower_end     <int> 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, … #> $ grain_fill_beg <int> 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, … #> $ grain_fill_end <int> 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, … #> # A tibble: 365 × 11 #> # Groups:   sitecode [1] #>    sitecode  tmin  tmax   gdd cumgdd   DAP onset flower_beg flower_end #>    <chr>    <dbl> <dbl> <dbl>  <dbl> <int> <int>      <int>      <int> #>  1 IND::6    22.9  32.0  27.4   27.4     1   261        290        298 #>  2 IND::6    21.6  31.4  26.5   53.9     2   261        290        298 #>  3 IND::6    21.8  33.1  27.5   81.4     3   261        290        298 #>  4 IND::6    21.1  33.3  27.2  109.      4   261        290        298 #>  5 IND::6    19.9  33.7  26.8  135.      5   261        290        298 #>  6 IND::6    20.3  34.2  27.3  163.      6   261        290        298 #>  7 IND::6    21.1  35.1  28.1  191.      7   261        290        298 #>  8 IND::6    21.8  35.6  28.7  220.      8   261        290        298 #>  9 IND::6    22.0  35.3  28.6  248.      9   261        290        298 #> 10 IND::6    20.9  35.0  27.9  276.     10   261        290        298 #> # ℹ 355 more rows #> # ℹ 2 more variables: grain_fill_beg <int>, grain_fill_end <int> # Check results of onset data head(growth$Onset_Data) #>     sitecode onset flower_beg flower_end grain_fill_beg grain_fill_end #> 1     AFG::1   318         74         89            102            135 #> 2  AFG03-2:1   306         71         87            102            137 #> 3 AFG03-3:23   304         78         94            109            144 #> 4 AFG03-3:32   307         74         90            104            139 #> 5 AFG03-3:44   300         75         92            107            144 #> 6 AFG03-4:31   318         74         88            101            134"},{"path":"/articles/ML_Workflows.html","id":"tunetrain","dir":"Articles","previous_headings":"","what":"tuneTrain()","title":"ML_Workflows","text":"tuneTrain() retruns list dataframes, textoutputs plots. type represents key informations Machine learning workflow process, , train/test tables, processing transformations, fitted model tuned model summaries, model performance metrics, feature performance predictions plots. explore three principle ML tasks can conducted using tuneTrain() function.","code":""},{"path":"/articles/ML_Workflows.html","id":"binary-classification-balanced-data","dir":"Articles","previous_headings":"tuneTrain()","what":"Binary classification : Balanced data","title":"ML_Workflows","text":"septoriaDurumWC dataset part icardaFIGSr package designed modeling climate impacts presence Septoria durum wheat. contains multiple columns representing climate variables, used predictors, response variable, ST_S, indicates presence severity Septoria. two cases labeled R S levels, describe resistance susceptibility, respectively.  R (Resistant): Represents samples/observations resistant Septoria. level indicates wheat genotypes environmental conditions Septoria’s impact minimal absent. S (Susceptible): Represents samples/observations susceptible Septoria. level indicates wheat genotypes environmental conditions Septoria’s impact significant. levels critical building validating models classify resistance susceptibility Septoria varying climatic conditions. let’s explore results. Class probabilities ST_S knn Roc plot ST_S knn Variable Importance ST_S knn Note difference Model Training Tuning objects end output. final hyperparameter value different (3 vs 5).","code":"data(\"septoriaDurumWC\", package = \"icardaFIGSr\")  dplyr::glimpse(septoriaDurumWC) #> Rows: 200 #> Columns: 56 #> $ ST_S   <fct> S, R, R, R, R, S, S, R, R, S, R, R, R, S, R, S, S, R, R, S, R, … #> $ tmin1  <dbl> -52, -17, 53, -73, -123, 100, -304, -99, 28, 26, 6, 60, -44, -7… #> $ tmin2  <dbl> -40, -8, 66, -66, -94, 110, -268, -92, 37, 32, 21, 66, -29, -18… #> $ tmin3  <dbl> 4, 13, 87, -21, -65, 114, -161, -42, 58, 53, 36, 88, 1, 23, 93,… #> $ tmin4  <dbl> 58, 50, 120, 59, -16, 118, -35, 36, 86, 81, 76, 101, 42, 42, 12… #> $ tmin5  <dbl> 102, 86, 150, 118, 31, 116, 33, 97, 122, 117, 122, 118, 80, 91,… #> $ tmin6  <dbl> 146, 121, 198, 157, 73, 111, 101, 132, 167, 162, 176, 144, 111,… #> $ tmin7  <dbl> 187, 152, 235, 177, 100, 116, 144, 148, 207, 204, 227, 155, 137… #> $ tmin8  <dbl> 185, 148, 240, 167, 93, 107, 125, 138, 211, 207, 228, 157, 134,… #> $ tmin9  <dbl> 143, 112, 204, 116, 43, 101, 49, 88, 172, 169, 197, 148, 102, 1… #> $ tmin10 <dbl> 86, 69, 149, 55, 0, 91, -40, 31, 122, 116, 147, 125, 58, 80, 16… #> $ tmin11 <dbl> 26, 28, 96, 8, -64, 86, -163, -20, 71, 66, 102, 92, 17, 26, 103… #> $ tmin12 <dbl> -20, 0, 63, -37, -105, 84, -264, -63, 39, 34, 65, 67, -18, 1, 5… #> $ tmax1  <dbl> 14, 80, 121, -12, 5, 265, -170, -36, 107, 101, 122, 142, 26, 88… #> $ tmax2  <dbl> 33, 96, 133, -2, 36, 272, -114, -28, 122, 113, 139, 155, 53, 93… #> $ tmax3  <dbl> 88, 138, 158, 53, 66, 274, -17, 25, 147, 138, 166, 179, 105, 13… #> $ tmax4  <dbl> 154, 185, 177, 163, 127, 270, 96, 130, 176, 164, 208, 200, 158,… #> $ tmax5  <dbl> 213, 235, 230, 230, 180, 264, 180, 204, 220, 214, 273, 217, 207… #> $ tmax6  <dbl> 271, 282, 281, 269, 228, 242, 234, 239, 270, 266, 340, 257, 251… #> $ tmax7  <dbl> 320, 318, 328, 292, 278, 217, 255, 255, 320, 318, 384, 279, 288… #> $ tmax8  <dbl> 321, 319, 326, 286, 275, 227, 237, 249, 320, 317, 391, 287, 285… #> $ tmax9  <dbl> 278, 281, 284, 227, 211, 234, 177, 191, 275, 269, 371, 266, 246… #> $ tmax10 <dbl> 197, 215, 227, 144, 155, 253, 85, 115, 213, 206, 314, 226, 185,… #> $ tmax11 <dbl> 113, 147, 166, 68, 70, 254, -42, 35, 153, 146, 245, 174, 119, 1… #> $ tmax12 <dbl> 41, 93, 125, 20, 22, 258, -144, -9, 109, 102, 185, 144, 52, 90,… #> $ prec1  <dbl> 64, 97, 64, 50, 17, 14, 5, 45, 52, 59, 57, 130, 47, 29, 13, 38,… #> $ prec2  <dbl> 62, 74, 51, 38, 11, 33, 5, 34, 48, 48, 52, 125, 37, 30, 10, 57,… #> $ prec3  <dbl> 73, 57, 46, 37, 18, 49, 9, 34, 46, 48, 48, 77, 37, 36, 15, 80, … #> $ prec4  <dbl> 81, 40, 40, 46, 28, 75, 26, 40, 39, 36, 14, 83, 47, 31, 10, 75,… #> $ prec5  <dbl> 63, 39, 39, 52, 74, 79, 52, 49, 36, 43, 4, 71, 50, 28, 7, 24, 3… #> $ prec6  <dbl> 18, 21, 11, 62, 73, 149, 100, 65, 16, 18, 0, 41, 32, 27, 2, 1, … #> $ prec7  <dbl> 4, 14, 1, 58, 43, 222, 161, 68, 3, 3, 0, 10, 12, 10, 1, 6, 11, … #> $ prec8  <dbl> 2, 11, 2, 44, 42, 220, 144, 51, 7, 4, 1, 12, 7, 12, 2, 2, 17, 3… #> $ prec9  <dbl> 7, 15, 20, 43, 34, 127, 81, 48, 20, 22, 0, 46, 15, 27, 9, 2, 34… #> $ prec10 <dbl> 50, 38, 41, 32, 22, 36, 29, 43, 34, 37, 6, 98, 27, 39, 13, 7, 3… #> $ prec11 <dbl> 66, 60, 63, 47, 14, 15, 11, 46, 51, 55, 29, 123, 30, 29, 14, 16… #> $ prec12 <dbl> 72, 99, 62, 66, 14, 8, 7, 47, 53, 57, 59, 118, 45, 31, 13, 28, … #> $ bio1   <dbl> 119, 131, 175, 100, 63, 178, 0, 72, 156, 151, 189, 160, 107, 13… #> $ bio2   <dbl> 102, 136, 75, 90, 148, 148, 130, 85, 93, 91, 145, 100, 115, 123… #> $ bio3   <dbl> 27, 40, 27, 24, 36, 77, 23, 24, 31, 31, 37, 44, 34, 36, 37, 36,… #> $ bio4   <dbl> 9503, 7151, 6938, 9934, 8461, 1051, 15232, 9756, 6945, 7074, 84… #> $ bio5   <dbl> 321, 319, 328, 292, 278, 274, 255, 255, 320, 318, 391, 287, 288… #> $ bio6   <dbl> -52, -17, 53, -73, -123, 84, -304, -99, 28, 26, 6, 60, -44, -18… #> $ bio7   <dbl> 373, 336, 275, 365, 401, 190, 559, 354, 292, 292, 385, 227, 332… #> $ bio8   <dbl> 103, 40, 103, 207, 147, 169, 182, 193, 84, 79, 89, 105, 98, 87,… #> $ bio9   <dbl> 238, 221, 267, 165, -44, 174, -211, 4, 248, 245, 290, 212, 198,… #> $ bio10  <dbl> 238, 223, 269, 224, 174, 192, 182, 193, 250, 247, 299, 215, 200… #> $ bio11  <dbl> -5, 40, 93, -29, -44, 167, -211, -55, 73, 67, 81, 105, 6, 40, 1… #> $ bio12  <dbl> 562, 565, 440, 575, 390, 1027, 630, 570, 405, 430, 270, 934, 38… #> $ bio13  <dbl> 81, 99, 64, 66, 74, 222, 161, 68, 53, 59, 59, 130, 50, 39, 15, … #> $ bio14  <dbl> 2, 11, 1, 32, 11, 8, 5, 34, 3, 3, 0, 10, 7, 10, 1, 1, 11, 3, 16… #> $ bio15  <dbl> 61, 62, 60, 21, 64, 86, 101, 21, 51, 53, 103, 53, 42, 29, 48, 9… #> $ bio16  <dbl> 217, 270, 189, 172, 190, 591, 405, 184, 156, 171, 168, 373, 134… #> $ bio17  <dbl> 13, 40, 14, 119, 42, 37, 17, 108, 26, 25, 1, 63, 34, 49, 5, 9, … #> $ bio18  <dbl> 13, 46, 23, 164, 158, 157, 405, 184, 30, 29, 1, 68, 51, 49, 5, … #> $ bio19  <dbl> 198, 270, 177, 154, 42, 569, 17, 126, 153, 164, 157, 373, 129, … # Lets select some random predictors for simplicity.  random_cols <- sample(colnames(septoriaDurumWC), 7)  # Note : we can still use the whole dataset for model training and testing.  # Select Y and predictors. septoriaDurumWC_sample <- septoriaDurumWC %>%    dplyr::select(ST_S, all_of(random_cols))  # check results septoriaDurumWC_sample #> # A tibble: 200 × 8 #>    ST_S   bio8 tmax10 tmin11 prec12  bio1 bio10 bio14 #>    <fct> <dbl>  <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 S       103    197     26     72   119   238     2 #>  2 R        40    215     28     99   131   223    11 #>  3 R       103    227     96     62   175   269     1 #>  4 R       207    144      8     66   100   224    32 #>  5 R       147    155    -64     14    63   174    11 #>  6 S       169    253     86      8   178   192     8 #>  7 S       182     85   -163      7     0   182     5 #>  8 R       193    115    -20     47    72   193    34 #>  9 R        84    213     71     53   156   250     3 #> 10 S        79    206     66     57   151   247     3 #> # ℹ 190 more rows # Count classes (balance check)  septoriaDurumWC_sample|>    count(ST_S) #> # A tibble: 2 × 2 #>   ST_S      n #>   <fct> <int> #> 1 R       106 #> 2 S        94 library(pROC) #> Type 'citation(\"pROC\")' for a citation. #>  #> Attaching package: 'pROC' #> The following objects are masked from 'package:stats': #>  #>     cov, smooth, var library(caret) #> Loading required package: ggplot2 #> Loading required package: lattice  ## Run Binary classification of ST_S with balanced data   knn.ST_S <- icardaFIGSr::tuneTrain(                       data = as.data.frame(septoriaDurumWC_sample),                        y =  'ST_S',                        method = 'knn', # using knn algorithm                        summary = multiClassSummary, # Important for classification tasks                        repeats = 3,                       classProbs = TRUE) # also important for classification tasks  #> k-Nearest Neighbors  #>  #> 141 samples #>   7 predictor #>   2 classes: 'R', 'S'  #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 127, 128, 128, 127, 126, 126, ...  #> Resampling results across tuning parameters: #>  #>   k   logLoss    AUC        prAUC      Accuracy   Kappa      F1        #>    5  2.4942735  0.6668863  0.4970950  0.6467399  0.2966753  0.6314547 #>    7  1.2124431  0.6569870  0.5001362  0.6476923  0.3012302  0.6196532 #>    9  1.1444721  0.6486253  0.5238724  0.6380342  0.2809037  0.6147496 #>   11  1.0744261  0.6490363  0.5129636  0.6142002  0.2330827  0.5925331 #>   13  0.9313736  0.6114654  0.5041211  0.5984860  0.2042462  0.5744044 #>   15  0.9258012  0.6094459  0.5061685  0.5887302  0.1840823  0.5627878 #>   17  0.9262011  0.6070649  0.5165494  0.5921368  0.1923800  0.5646618 #>   19  0.7683714  0.6105159  0.5086565  0.5821123  0.1728507  0.5438374 #>   21  0.6807348  0.6178571  0.5249527  0.5982540  0.2082104  0.5483432 #>   23  0.6816755  0.6154691  0.5014774  0.5917705  0.1943961  0.5480329 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5880952    0.7095238    0.7081746       0.6053319       0.7081746 #>   0.5654762    0.7380952    0.7208069       0.6069372       0.7208069 #>   0.5654762    0.7190476    0.7070635       0.5949471       0.7070635 #>   0.5470238    0.6880952    0.6789021       0.5768074       0.6789021 #>   0.5309524    0.6753968    0.6682011       0.5651852       0.6682011 #>   0.5172619    0.6682540    0.6603800       0.5567400       0.6603800 #>   0.5142857    0.6801587    0.6647090       0.5573906       0.6647090 #>   0.4946429    0.6793651    0.6433598       0.5489153       0.6433598 #>   0.4767857    0.7341270    0.6930556       0.5566450       0.6930556 #>   0.4815476    0.7150794    0.6715212       0.5529810       0.6715212 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5880952  0.3119658       0.6488095         #>   0.5654762  0.3005128       0.6517857         #>   0.5654762  0.3001954       0.6422619         #>   0.5470238  0.2908303       0.6175595         #>   0.5309524  0.2817827       0.6031746         #>   0.5172619  0.2742979       0.5927579         #>   0.5142857  0.2727350       0.5972222         #>   0.4946429  0.2630525       0.5870040         #>   0.4767857  0.2534799       0.6054563         #>   0.4815476  0.2560195       0.5983135         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was k = 7. #> k-Nearest Neighbors  #>  #> 141 samples #>   7 predictor #>   2 classes: 'R', 'S'  #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 127, 127, 127, 128, 127, 126, ...  #> Resampling results across tuning parameters: #>  #>   k  logLoss   AUC        prAUC      Accuracy   Kappa      F1        #>   5  2.419047  0.6766440  0.4987306  0.6488156  0.3023780  0.6329208 #>   6  1.650332  0.6698625  0.4961783  0.6473016  0.2981138  0.6306002 #>   7  1.352115  0.6622166  0.4871674  0.6575214  0.3193743  0.6404283 #>   8  1.124306  0.6655612  0.5046772  0.6295360  0.2659140  0.6051478 #>   9  1.117565  0.6627480  0.5225668  0.6455433  0.2947085  0.6287166 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5791667    0.7277778    0.7264683       0.6024747       0.7264683 #>   0.5797619    0.7230159    0.7285979       0.6033634       0.7285979 #>   0.5869048    0.7373016    0.7375998       0.6127345       0.7375998 #>   0.5535714    0.7166667    0.6993723       0.5912049       0.6993723 #>   0.5744048    0.7253968    0.7315873       0.5992027       0.7315873 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5791667  0.3083761       0.6534722         #>   0.5797619  0.3090842       0.6513889         #>   0.5869048  0.3128205       0.6621032         #>   0.5535714  0.2940415       0.6351190         #>   0.5744048  0.3058364       0.6499008         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was k = 7. #> Setting levels: control = R, case = S #> Setting direction: controls < cases # Class probabilities table knn.ST_S$`Class Probabilities` #>            R         S #> 1  0.4285714 0.5714286 #> 2  0.8571429 0.1428571 #> 3  0.2857143 0.7142857 #> 4  0.4285714 0.5714286 #> 5  0.2857143 0.7142857 #> 6  0.8571429 0.1428571 #> 7  0.2857143 0.7142857 #> 8  0.2857143 0.7142857 #> 9  0.2857143 0.7142857 #> 10 0.5714286 0.4285714 #> 11 1.0000000 0.0000000 #> 12 0.4285714 0.5714286 #> 13 0.4285714 0.5714286 #> 14 0.8571429 0.1428571 #> 15 0.1428571 0.8571429 #> 16 0.2857143 0.7142857 #> 17 1.0000000 0.0000000 #> 18 0.7142857 0.2857143 #> 19 0.8571429 0.1428571 #> 20 0.5714286 0.4285714 #> 21 0.7142857 0.2857143 #> 22 0.5714286 0.4285714 #> 23 0.2857143 0.7142857 #> 24 0.5714286 0.4285714 #> 25 0.2857143 0.7142857 #> 26 1.0000000 0.0000000 #> 27 0.2857143 0.7142857 #> 28 0.4285714 0.5714286 #> 29 0.4285714 0.5714286 #> 30 0.4285714 0.5714286 #> 31 0.2857143 0.7142857 #> 32 0.4285714 0.5714286 #> 33 1.0000000 0.0000000 #> 34 0.2857143 0.7142857 #> 35 0.2857143 0.7142857 #> 36 0.5714286 0.4285714 #> 37 0.7142857 0.2857143 #> 38 0.7142857 0.2857143 #> 39 0.8571429 0.1428571 #> 40 0.5714286 0.4285714 #> 41 0.2857143 0.7142857 #> 42 0.2857143 0.7142857 #> 43 1.0000000 0.0000000 #> 44 0.8750000 0.1250000 #> 45 0.4285714 0.5714286 #> 46 0.2857143 0.7142857 #> 47 0.5714286 0.4285714 #> 48 0.1428571 0.8571429 #> 49 0.8571429 0.1428571 #> 50 0.8571429 0.1428571 #> 51 0.4285714 0.5714286 #> 52 0.4285714 0.5714286 #> 53 0.5714286 0.4285714 #> 54 1.0000000 0.0000000 #> 55 0.5714286 0.4285714 #> 56 0.8571429 0.1428571 #> 57 0.8571429 0.1428571 #> 58 0.4285714 0.5714286 #> 59 0.4285714 0.5714286 ## Plot class probabilities knn.ST_S$`Class Probabilities Plot` # ROC plot knn.ST_S$ROC_Plot # Variable importance knn.ST_S$Variableimportance # Model quality knn.ST_S$`Model quality` #> Confusion Matrix and Statistics #>  #>           Reference #> Prediction  R  S #>          R 22  7 #>          S  9 21 #>                                            #>                Accuracy : 0.7288           #>                  95% CI : (0.5973, 0.8364) #>     No Information Rate : 0.5254           #>     P-Value [Acc > NIR] : 0.00113          #>                                            #>                   Kappa : 0.4581           #>                                            #>  Mcnemar's Test P-Value : 0.80259          #>                                            #>             Sensitivity : 0.7097           #>             Specificity : 0.7500           #>          Pos Pred Value : 0.7586           #>          Neg Pred Value : 0.7000           #>              Prevalence : 0.5254           #>          Detection Rate : 0.3729           #>    Detection Prevalence : 0.4915           #>       Balanced Accuracy : 0.7298           #>                                            #>        'Positive' Class : R                #> # Training knn.ST_S$Training #> k-Nearest Neighbors  #>  #> 141 samples #>   7 predictor #>   2 classes: 'R', 'S'  #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 127, 127, 127, 128, 127, 126, ...  #> Resampling results across tuning parameters: #>  #>   k  logLoss   AUC        prAUC      Accuracy   Kappa      F1        #>   5  2.419047  0.6766440  0.4987306  0.6488156  0.3023780  0.6329208 #>   6  1.650332  0.6698625  0.4961783  0.6473016  0.2981138  0.6306002 #>   7  1.352115  0.6622166  0.4871674  0.6575214  0.3193743  0.6404283 #>   8  1.124306  0.6655612  0.5046772  0.6295360  0.2659140  0.6051478 #>   9  1.117565  0.6627480  0.5225668  0.6455433  0.2947085  0.6287166 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5791667    0.7277778    0.7264683       0.6024747       0.7264683 #>   0.5797619    0.7230159    0.7285979       0.6033634       0.7285979 #>   0.5869048    0.7373016    0.7375998       0.6127345       0.7375998 #>   0.5535714    0.7166667    0.6993723       0.5912049       0.6993723 #>   0.5744048    0.7253968    0.7315873       0.5992027       0.7315873 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5791667  0.3083761       0.6534722         #>   0.5797619  0.3090842       0.6513889         #>   0.5869048  0.3128205       0.6621032         #>   0.5535714  0.2940415       0.6351190         #>   0.5744048  0.3058364       0.6499008         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was k = 7. # Tuning knn.ST_S$Tuning #> k-Nearest Neighbors  #>  #> 141 samples #>   7 predictor #>   2 classes: 'R', 'S'  #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 127, 128, 128, 127, 126, 126, ...  #> Resampling results across tuning parameters: #>  #>   k   logLoss    AUC        prAUC      Accuracy   Kappa      F1        #>    5  2.4942735  0.6668863  0.4970950  0.6467399  0.2966753  0.6314547 #>    7  1.2124431  0.6569870  0.5001362  0.6476923  0.3012302  0.6196532 #>    9  1.1444721  0.6486253  0.5238724  0.6380342  0.2809037  0.6147496 #>   11  1.0744261  0.6490363  0.5129636  0.6142002  0.2330827  0.5925331 #>   13  0.9313736  0.6114654  0.5041211  0.5984860  0.2042462  0.5744044 #>   15  0.9258012  0.6094459  0.5061685  0.5887302  0.1840823  0.5627878 #>   17  0.9262011  0.6070649  0.5165494  0.5921368  0.1923800  0.5646618 #>   19  0.7683714  0.6105159  0.5086565  0.5821123  0.1728507  0.5438374 #>   21  0.6807348  0.6178571  0.5249527  0.5982540  0.2082104  0.5483432 #>   23  0.6816755  0.6154691  0.5014774  0.5917705  0.1943961  0.5480329 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.5880952    0.7095238    0.7081746       0.6053319       0.7081746 #>   0.5654762    0.7380952    0.7208069       0.6069372       0.7208069 #>   0.5654762    0.7190476    0.7070635       0.5949471       0.7070635 #>   0.5470238    0.6880952    0.6789021       0.5768074       0.6789021 #>   0.5309524    0.6753968    0.6682011       0.5651852       0.6682011 #>   0.5172619    0.6682540    0.6603800       0.5567400       0.6603800 #>   0.5142857    0.6801587    0.6647090       0.5573906       0.6647090 #>   0.4946429    0.6793651    0.6433598       0.5489153       0.6433598 #>   0.4767857    0.7341270    0.6930556       0.5566450       0.6930556 #>   0.4815476    0.7150794    0.6715212       0.5529810       0.6715212 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.5880952  0.3119658       0.6488095         #>   0.5654762  0.3005128       0.6517857         #>   0.5654762  0.3001954       0.6422619         #>   0.5470238  0.2908303       0.6175595         #>   0.5309524  0.2817827       0.6031746         #>   0.5172619  0.2742979       0.5927579         #>   0.5142857  0.2727350       0.5972222         #>   0.4946429  0.2630525       0.5870040         #>   0.4767857  0.2534799       0.6054563         #>   0.4815476  0.2560195       0.5983135         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was k = 7. # We also have access to the training and testing datasets in results list following the same logic  knn.ST_S$`Training Data` #>     ST_S bio8 tmax10 tmin11 prec12 bio1 bio10 bio14 #> 3      R  103    227     96     62  175   269     1 #> 4      R  207    144      8     66  100   224    32 #> 5      R  147    155    -64     14   63   174    11 #> 6      S  169    253     86      8  178   192     8 #> 7      S  182     85   -163      7    0   182     5 #> 8      R  193    115    -20     47   72   193    34 #> 9      R   84    213     71     53  156   250     3 #> 11     R   89    314    102     59  189   299     0 #> 12     R  105    226     92    118  160   215    10 #> 13     R   98    185     17     45  107   200     7 #> 15     R  164    286    103     13  207   300     1 #> 16     S   62    222     -4     28  119   227     1 #> 17     S  131    220     55     36  149   243    11 #> 19     R  144    182     21     52  109   198    16 #> 20     S  140    312    111      0  213   280     0 #> 22     R  259    320    157      5  261   307     0 #> 23     S  117    198     30     26  135   232     8 #> 25     S  154    276     94     16  197   291     2 #> 28     S   92    201     32     29  136   233     8 #> 30     R   17    192     24     92  114   231     3 #> 31     R  159    214     68     16  156   163    16 #> 33     R   94    231     83     74  163   243     3 #> 34     R  150     81    -21     49   49   166    29 #> 35     S  138    179     46     36  121   231    23 #> 36     S  194    269     94      2  191   211     2 #> 37     R  120    209    105     93  156   199     5 #> 38     R  111    232     91     78  166   236     2 #> 39     R   79    211     71     87  147   235    12 #> 41     S  101    223     89     70  167   253     1 #> 43     S  159    304    133      4  215   276     0 #> 44     R   98    278     93    124  184   267    12 #> 46     S  180    255     76      3  178   198     2 #> 47     S   35    232     42    114  143   248     3 #> 48     R  186     83   -107     30   26   186    23 #> 49     S  170    235     99      8  171   183     8 #> 50     S  202    287    101      5  204   227     5 #> 52     S   84    242     75     58  167   257     8 #> 53     R  129    265     40     23  178   276     9 #> 54     R   -8    194     22     87  116   236     2 #> 55     R  205    142      8     56  100   222    30 #> 58     S  165    238     94      6  178   195     6 #> 60     S  179    270     81      6  187   203     5 #> 61     S   64    265     69     83  177   293     1 #> 62     R  187    235     99     43  174   241    10 #> 63     S  154    214     70     18  154   158    18 #> 64     S  207    144      8     66  100   224    32 #> 66     S  211    194     33     23  129   233    22 #> 69     R  115    154     13     57   98   177    29 #> 70     S   81    240     73     49  165   255     9 #> 72     S   -4    197      4     80  104   205     5 #> 75     R   91    210     16     66  130   221     6 #> 76     S   99    224     89     61  170   261     1 #> 77     R  120    186     41      7  128   147     7 #> 78     R   61    191     56     82  127   212    22 #> 79     R  186     88   -110     23   22   186    18 #> 81     R  184     78   -119     20   14   184    14 #> 82     S  276    319    220      1  268   289     0 #> 84     S  121    204     48     27  138   219     6 #> 85     S  136    202     73      8  140   148     8 #> 87     R  126    271    110    150  189   268     6 #> 89     R  154    262    127     25  193   237     1 #> 90     S   92    218     80     62  163   255     3 #> 92     S  210    268     96     14  206   309     2 #> 93     R  112    270    117    138  190   268     5 #> 95     S   93    206     46     43  139   235    27 #> 96     S   73    203     58     59  145   241     5 #> 97     S  188    261    105      6  193   212     3 #> 99     R   54    174     32    124  118   195     3 #> 100    R   92    240     92    120  172   257     3 #> 103    R  195    136     -1     46   89   212    33 #> 104    S  125    186     48     10  129   144    10 #> 105    S   84    223     63     73  158   250     4 #> 108    R  229    235    135    102  173   233    26 #> 109    R   96    190     51     49  139   227    11 #> 111    R   30    202     24     85  120   211     9 #> 112    S  232    234     61     11  178   280     3 #> 113    R   75    198     57    144  132   211    13 #> 114    R   66    208     54     76  139   229    19 #> 115    S  193    166     27     45  112   208    31 #> 117    R  158    206     57     23  146   169    19 #> 118    R   84    243     76     62  167   256     8 #> 119    R  317    342    108      2  247   332     1 #> 120    R  184    262     89      5  188   205     5 #> 121    R   76    185     19     44  117   211    12 #> 124    R  121    194    109     26  149   250     9 #> 125    R   87    169      4     53   95   190     7 #> 126    R  151    189     27     42  117   210     9 #> 128    R   63    224     60    128  152   244     8 #> 129    S  132    192     54     15  137   148    15 #> 131    R  120    232    112    140  175   234     1 #> 133    R  103    225     94     64  173   262     1 #> 134    R  109    198     15     47  116   211    11 #> 135    R   95    214     27     54  148   265     2 #> 138    R   95    214     27     54  148   265     2 #> 139    S   56    172     27    138  111   185     4 #> 140    R   36    206     28     69  125   216    11 #> 141    S  121    233    112     55  183   264     1 #> 142    S   88    244     48    108  155   240     4 #> 143    S  107    248    101     65  177   253     3 #> 144    S  115    227     95     85  163   228     2 #> 145    S  142    209     56      6  143   159     3 #> 146    R  184    262     89      5  188   205     5 #> 147    S  141    205     59      7  147   164     7 #> 148    S   76    206     63     82  147   236     3 #> 149    R  129    261     61     70  171   251     2 #> 150    R  199    275    109     19  205   219    19 #> 151    R  125    288     93      8  197   274     0 #> 153    S   76    205     62     66  148   244     3 #> 154    S  100    224     89     67  167   253     1 #> 156    R   91    217     80     64  163   256     2 #> 157    R  157    245     76      7  177   224     2 #> 158    S  104    287    103    124  193   281    13 #> 160    R  155    230     32     20  157   281     2 #> 164    S  120    226    100     85  164   225     2 #> 165    S  116    174     48     15  123   133    15 #> 166    S  133    221     61     45  152   244    13 #> 167    S   89    217     76     62  159   249     3 #> 168    R  111    229    103     58  179   267     1 #> 170    R   38    210     31     89  128   220     8 #> 171    S   76    204     62     68  148   244     4 #> 173    R  -17    226     10     70  119   242     1 #> 175    R   -5    136    -59     47   50   156     0 #> 176    S  100    225     91     60  172   264     1 #> 179    S  210    268     95     14  206   309     2 #> 180    R  105    221     96     79  167   251     2 #> 181    S  115    197     34     26  132   223     8 #> 182    R  198     85    -59     47   46   198    29 #> 183    R  260    313    133     13  251   314     2 #> 184    R  -31    136    -95     30   29   146     0 #> 186    R  156    261    130     26  193   234     1 #> 188    R  157    222     88      9  159   169     9 #> 189    S  128    334    105     24  227   334     0 #> 190    S  132    183     49     17  133   141    17 #> 191    S  172    276    119     26  201   278     0 #> 192    S   63    224     -2     27  121   229     1 #> 193    R   25    187     26     72  115   204    12 #> 194    S   77    234     70     56  161   250     9 #> 195    R  153    191     34     42  118   203    12 #> 197    S  171    253     99      9  183   196     9 #> 199    S   68    271     64     76  177   288     0 #> 200    S  176    251    104     11  187   208     5 knn.ST_S$`Test Data`  #>     ST_S bio8 tmax10 tmin11 prec12 bio1 bio10 bio14 #> 1      S  103    197     26     72  119   238     2 #> 2      R   40    215     28     99  131   223    11 #> 10     S   79    206     66     57  151   247     3 #> 14     S   87    196     26     31  130   229    10 #> 18     R  187    261    104      6  193   212     3 #> 21     R   80    209     65    115  142   219    12 #> 24     S  162    224     85     10  161   172    10 #> 26     S  196    262     95     11  189   208    11 #> 27     S  170    248    102      6  187   206     6 #> 29     R   74    213     60    103  143   232     9 #> 32     R  128    176     -3     48   90   178     7 #> 40     R  233    278    135     48  176   241     8 #> 42     S  154    214     70     18  154   160    18 #> 45     S   33    149     47    185   99   171     6 #> 51     S   74    203     61     64  147   243     4 #> 56     S  135    234    114     85  182   247     2 #> 57     R   38    205     34     73  127   217    11 #> 59     R  104    287    108    137  192   274     6 #> 65     S   10    184     18     51  108   201     9 #> 67     R  145    194     56     69  138   213    27 #> 68     R  111    262    109    117  179   246     1 #> 71     R   74    213     60    103  143   232     9 #> 73     S  173    260     81      7  182   197     7 #> 74     R  150    250     89     35  180   254     2 #> 80     S   87    235     72     46  163   253     9 #> 83     S  177     68    -54     44   42   177    25 #> 86     S   87    235     72     46  163   253     9 #> 88     R  113    202     11     64   95   115     2 #> 91     R   87    196     26     31  130   228     9 #> 94     S  101    222     92     65  170   260     2 #> 98     S  184    262     89      5  188   205     5 #> 101    S   68    200     55     73  136   213     5 #> 102    R   98    147    -27     39   61   161    16 #> 106    R  176    251    104     11  187   208     5 #> 107    S  143    200     64      7  145   160     7 #> 110    S  149    273     90     35  189   267     2 #> 116    R  114    222    127    127  173   237     1 #> 122    R  104    287    103    124  193   281    13 #> 123    S  108    276    115    144  191   271     6 #> 127    R  119    254     98     83  186   267     1 #> 130    S  181    243     76     12  174   194     9 #> 132    R  142    209     54     10  148   164     9 #> 136    S  144    191     14     49  108   194    12 #> 137    R  218    112    -41     36   67   218    21 #> 152    R  128    281     91     30  202   288     0 #> 155    R  177    188     48     16  135   238    13 #> 159    S  107    256    104     20  181   258     1 #> 161    S  165    232     49      7  158   178     5 #> 162    R   19    184     18     76  109   199    13 #> 163    R  100    187     13     44  108   198     9 #> 169    S  115    197     38     27  132   218     8 #> 172    S   96    209    104     40  152   219    31 #> 174    R   62    196     44     45  134   227     9 #> 177    R  108    188     30     48  117   209    12 #> 178    R    5    186    -26     49   99   202     0 #> 185    R   79    194     77    104  138   220    22 #> 187    R  178    125     -5     43   73   178    31 #> 196    S  101    223     92     82  161   229     4 #> 198    R   89    197     28     31  131   229     9"},{"path":"/articles/ML_Workflows.html","id":"binary-classification-imbalanced-data","dir":"Articles","previous_headings":"tuneTrain()","what":"Binary classification : imbalanced data","title":"ML_Workflows","text":"BarleyRNO dataset designed modeling morphological characteristics barley, specifically focusing response classification barley Kernel row number type climate influences. response variable RNO categorizes barley following levels: 1 (Six-rowed): Represents barley genotypes six distinct rows kernels spike, typically associated higher grain yields. 2 (Two-rowed): Represents barley genotypes two distinct rows kernels spike, often preferred malting brewing due uniformity kernel size. 3 (Two-rowed - rudimentary florets): Represents two-rowed barley underdeveloped rudimentary florets. 4 (Irregular lateral florets): Represents barley genotypes irregularly developed lateral florets spike. 5 (Irregular: 2 6 rows): Represents heterogeneous genotypes showing spikes two-rowed six-rowed characteristics. 10 (Heterogeneous): Represents genetically diverse group mixed spike structures. example, use first 2 categories : six-rowed two-rowed. levels critical building validating models classify barley kernel row number based environmental predictors possibily genetic predictors, aiding breeding programs genotype selection.","code":"# Load sample data imbalanced data for binary classification    BarleyRNOWC <- icardaFIGSr::BarleyRNOWC  # lets sample BarleyRNOWC dataset   random_cols <- sample(colnames(BarleyRNOWC), 7)   # Note : we can still use the whole dataset for model training and testing.  # Select Y and predictors.  BarleyRNOWC_sample <- BarleyRNOWC %>%    dplyr::select(RNO, all_of(random_cols))   # Check results   BarleyRNOWC_sample #>     RNO  tmax_11    bio_15  tmin_06 prec_03 prec_08  tmax_03 bio_18 #> 1     1 30.09200  65.05665 26.52000      26       7 30.18800     26 #> 2     1 22.22000  97.68206 17.95200      12       1 19.35200      3 #> 3     1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 4     1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 5     1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 6     1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 7     1 20.03200  85.06351 18.66000      18     219 24.60800    621 #> 8     1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 9     1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 10    1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 11    1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 12    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 13    1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 14    1 19.62400  90.98979 16.02800      62       2 16.09200      9 #> 15    1 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 16    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 17    1 15.26000  36.74965 13.36000      30       7 15.16000     36 #> 18    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 19    1 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 20    1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 21    1 16.38800  44.06684 18.88800      60      65 18.06400    221 #> 22    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 23    1 14.65200  81.31908 20.06000      30     132 14.04800    382 #> 24    1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 25    1 15.18400  58.32013 12.97200      89      11 13.76800     58 #> 26    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 27    1 10.69600 142.14531 19.14400       8     151 12.38000    381 #> 28    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 29    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 30    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 31    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 32    1 24.30000  81.19894 23.08000      38      15 24.52000     32 #> 33    1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 34    1 27.54000  67.51161 26.39200      34      20 27.72800     37 #> 35    1 20.02400  75.76439 19.86000      12       0 19.18800      0 #> 36    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 37    1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 38    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 39    1 20.99600  68.61182 19.58400      71       8 18.94400     32 #> 40    1 24.32400 102.93157 18.31600      17       0 21.66000      0 #> 41    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 42    1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 43    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 44    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 45    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 46    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 47    1 10.69600 142.14531 19.14400       8     151 12.38000    381 #> 48    1 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 49    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 50    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 51    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 52    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 53    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 54    1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 55    1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 56    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 57    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 58    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 59    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 60    1 14.65200  81.31908 20.06000      30     132 14.04800    382 #> 61    1 19.62400  90.98979 16.02800      62       2 16.09200      9 #> 62    1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 63    1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 64    1 19.89091  70.98363 16.28182      78       6 18.14545     57 #> 65    1 16.60800  47.01530 21.44400     127     123 13.98800    439 #> 66    1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 67    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 68    1 20.87200  41.11276 23.98800      14       5 21.64400     13 #> 69    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 70    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 71    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 72    1 -5.04000  36.43435 -1.51200      23      18 -7.98000     55 #> 73    1 21.08000  85.80009 19.78800     114       4 18.31600     29 #> 74    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 75    1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 76    1 22.05200  97.64330 17.77600      12       1 19.15200      3 #> 77    1 10.69600 142.14531 19.14400       8     151 12.38000    381 #> 78    1 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 79    1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 80    1 22.33600 100.03368 18.02400      12       1 19.45200      2 #> 81    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 82    1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 83    1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 84    1 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 85    1 30.53200  79.71966 28.16400      28       8 29.60800     21 #> 86    1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 87    1 10.20400  64.41352  8.52000      46      12  8.50000     30 #> 88    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 89    1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 90    1 23.99200 103.69400 18.38000       9       0 21.29200      1 #> 91    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 92    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 93    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 94    1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 95    1 11.44000  60.87855 12.02000      17      17 10.20800     40 #> 96    1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 97    1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 98    1 16.60800  47.01530 21.44400     127     123 13.98800    439 #> 99    1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 100   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 101   1 19.65200  76.46056 19.66000      14       0 18.70800      0 #> 102   1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 103   1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 104   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 105   1 29.73600  84.48630 26.80800      27       4 29.80800     19 #> 106   1 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 107   1 14.65200  81.31908 20.06000      30     132 14.04800    382 #> 108   1 12.53600  32.68545 12.19200      50      18 12.46000     53 #> 109   1 22.72000  77.00456 21.03200      40      19 21.94000     48 #> 110   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 111   1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 112   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 113   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 114   1 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 115   1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 116   1 14.65200  81.31908 20.06000      30     132 14.04800    382 #> 117   1 30.02000  88.46160 27.07200      29       5 29.82000     12 #> 118   1 21.48000  90.34368 18.05200     141       1 18.56000     10 #> 119   1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 120   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 121   1 24.01200  94.39568 20.79200       9       0 22.74400      0 #> 122   1  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 123   1 17.79200  54.78045 15.80400      25      20 16.52800     50 #> 124   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 125   1 12.53600  32.68545 12.19200      50      18 12.46000     53 #> 126   1 10.69600 142.14531 19.14400       8     151 12.38000    381 #> 127   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 128   1 22.00000  92.05145 17.46000      11       0 19.14800      2 #> 129   1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 130   1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 131   1 20.46800  89.26852 18.39200      29       5 19.91200     19 #> 132   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 133   1 20.03200  85.06351 18.66000      18     219 24.60800    621 #> 134   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 135   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 136   1 20.03200  85.06351 18.66000      18     219 24.60800    621 #> 137   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 138   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 139   1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 140   1 22.62400 100.10287 18.30400      12       1 19.75200      2 #> 141   1 10.69600 142.14531 19.14400       8     151 12.38000    381 #> 142   1 24.01200  94.39568 20.79200       9       0 22.74400      0 #> 143   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 144   1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 145   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 146   1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 147   1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 148   1 -4.12800 105.32485 10.56400      10     139 -0.99600    390 #> 149   1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 150   1 30.02000  88.46160 27.07200      29       5 29.82000     12 #> 151   1  2.48000  92.24405  4.56800      11      83  3.90000    230 #> 152   1 31.90800 149.30829 27.45600       3      78 33.96000     94 #> 153   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 154   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 155   1 15.13600  81.09148 20.10800      44     126 12.61200    449 #> 156   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 157   1 15.95600  85.60078 20.70400      24     204 16.16000    586 #> 158   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 159   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 160   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 161   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 162   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 163   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 164   1 11.62400  38.53807 11.43200      49      14 11.61200     47 #> 165   1 15.44400  33.49338 14.96400      49      16 15.60000     50 #> 166   1 -1.97200  45.39811  1.24000      32      15 -5.29200     40 #> 167   1 11.08800 109.93213 16.84800      20     160 10.93600    498 #> 168   1 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 169   1  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 170   1 18.14000  90.19624 15.29600      81       4 14.64800     17 #> 171   2 15.62800  58.71524 20.99600      59     132 13.52400    433 #> 172   2 29.94800  82.61971 26.82800      28       5 30.07200     20 #> 173   2 19.90800  81.88865 20.23600      64       0 17.28400      3 #> 174   2 22.71600  97.99079 18.30000      13       1 19.72400      3 #> 175   2 19.04400  79.07721 17.74400      14       0 17.86000      0 #> 176   2 15.63200  47.71310 14.27600      63      11 14.83600     44 #> 177   2 19.60000  87.20588 17.88000      42       0 17.42400      2 #> 178   2 17.14800  37.05869 15.62800      51      13 16.64400     48 #> 179   2 20.03200  85.06351 18.66000      18     219 24.60800    621 #> 180   2  5.59200  97.85579 16.80000      16     155  6.54800    418 #> 181   2 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 182   2 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 183   2 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 184   2 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 185   2 18.79600  86.59062 19.55200      82       1 16.99600      9 #> 186   2 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 187   2 18.58000  76.19782 16.73600      13       0 17.39600      0 #> 188   2 17.56800  48.06286 20.52000     129     131 14.62400    505 #> 189   2 20.03200  85.06351 18.66000      18     219 24.60800    621 #> 190   2 22.60400  98.53925 18.22800      12       1 19.65200      3 #> 191   2  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 192   2 16.80800  47.55249 20.60400      68     146 12.72800    421 #> 193   2 20.02400  75.76439 19.86000      12       0 19.18800      0 #> 194   2 30.74800  91.70721 26.63600      34       5 29.74800     15 #> 195   2  6.99200 103.33441 12.21200      12     124  7.90800    312 #> 196   2 22.79200  91.51672 17.80400      11       0 21.24400      0 #> 197   2 19.42000  86.17073 15.56400      20       0 18.23200      0 #> 198   2 18.20400  83.23743 16.35200      38       0 16.63200      1 #> 199   2 19.87200  75.85405 20.31200      16       0 18.94000      0 #> 200   2 19.41200  76.84998 18.75200      13       0 18.44400      0 # Count classes for data imbalance check BarleyRNOWC_sample%>%   count(RNO) #>   RNO   n #> 1   1 170 #> 2   2  30 ## Binary classification of RNO  rf.RNO <- icardaFIGSr::tuneTrain(data = BarleyRNOWC_sample,                       y =  'RNO',                       method = 'rf',                       summary = multiClassSummary,                       imbalanceMethod =\"up\",                        imbalanceThreshold = 0.2,                       process = c(\"scale\",\"center\"),                      classProbs = TRUE,                      repeats = 3) #> note: only 6 unique complexity parameters in default grid. Truncating the grid to 6 . #>  #> Random Forest  #>  #> 140 samples #>   7 predictor #>   2 classes: 'Cl_1', 'Cl_2'  #>  #> Pre-processing: scaled (7), centered (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 126, 126, 126, 126, 126, 126, ...  #> Addtional sampling using up-sampling prior to pre-processing #>  #> Resampling results across tuning parameters: #>  #>   mtry  logLoss   AUC        prAUC      Accuracy   Kappa      F1        #>   2     1.351967  0.7435396  0.4285756  0.7796093  0.2839066  0.8616300 #>   3     1.316165  0.7359007  0.4234439  0.7712332  0.2636587  0.8532896 #>   4     1.598478  0.7445707  0.4219979  0.7697192  0.2677371  0.8547945 #>   5     1.345545  0.7487584  0.4214455  0.7862271  0.3024619  0.8649212 #>   6     1.601229  0.7247896  0.4285286  0.7649817  0.2316640  0.8517068 #>   7     1.683125  0.7121002  0.4058053  0.7790110  0.3142004  0.8578083 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.8267677    0.5166667    0.9080107       0.3658730       0.9080107 #>   0.8169192    0.5111111    0.9101368       0.3514286       0.9101368 #>   0.8181818    0.5000000    0.9035274       0.3658730       0.9035274 #>   0.8318182    0.5277778    0.9124063       0.3980952       0.9124063 #>   0.8181818    0.4666667    0.8994466       0.3286508       0.8994466 #>   0.8202020    0.5500000    0.9130392       0.4053175       0.9130392 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.8267677  0.7030281       0.6717172         #>   0.8169192  0.6946520       0.6640152         #>   0.8181818  0.6957021       0.6590909         #>   0.8318182  0.7074237       0.6797980         #>   0.8181818  0.6955433       0.6424242         #>   0.8202020  0.6976679       0.6851010         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was mtry = 5. #> Warning in nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, #> : There were missing values in resampled performance measures. #> Random Forest  #>  #> 140 samples #>   7 predictor #>   2 classes: 'Cl_1', 'Cl_2'  #>  #> Pre-processing: scaled (7), centered (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 127, 126, 126, 126, 126, 126, ...  #> Addtional sampling using up-sampling prior to pre-processing #>  #> Resampling results across tuning parameters: #>  #>   mtry  logLoss   AUC        prAUC      Accuracy   Kappa      F1        #>   3     1.258600  0.7593434  0.4402517  0.7550183  0.2557136  0.8423889 #>   4     1.308793  0.7519571  0.4354836  0.7643590  0.2592873  0.8495114 #>   5     1.234428  0.7224747  0.4337686  0.7580830  0.2334096  0.8463531 #>   6     1.729796  0.7323232  0.4248192  0.7696703  0.2990418  0.8518427 #>   7     1.497285  0.7172559  0.4117107  0.7575580  0.2290320  0.8451502 #>   Sensitivity  Specificity  Pos_Pred_Value  Neg_Pred_Value  Precision #>   0.7926768    0.5500000    0.9112595       0.3342687       0.9112595 #>   0.8063131    0.5333333    0.9096996       0.3219444       0.9096996 #>   0.8042929    0.5000000    0.9030733       0.3106732       0.9030733 #>   0.8070707    0.5666667    0.9149893       0.3871100       0.9149893 #>   0.8037879    0.5000000    0.9043756       0.3077586       0.9043756 #>   Recall     Detection_Rate  Balanced_Accuracy #>   0.7926768  0.6738095       0.6713384         #>   0.8063131  0.6855311       0.6698232         #>   0.8042929  0.6840171       0.6521465         #>   0.8070707  0.6860806       0.6868687         #>   0.8037879  0.6834921       0.6518939         #>  #> Accuracy was used to select the optimal model using the largest value. #> The final value used for the model was mtry = 6. #> Setting levels: control = Cl_1, case = Cl_2 #> Setting direction: controls < cases # same outputs of binary classification task  names(rf.RNO) #> [1] \"Tuning\"                   \"Training\"                 #> [3] \"Model quality\"            \"Variableimportance\"       #> [5] \"ROC_Plot\"                 \"Class Probabilities\"      #> [7] \"Class Probabilities Plot\" \"Training Data\"            #> [9] \"Test Data\""},{"path":"/articles/ML_Workflows.html","id":"regression","dir":"Articles","previous_headings":"tuneTrain()","what":"Regression","title":"ML_Workflows","text":"DurumWheatDHEWC dataset designed modeling climate impacts days heading (DHE) durum wheat. contains multiple columns representing climate variables, used predictors, numeric response variable, DHE, indicates number days required durum wheat reach heading varying environmental conditions. dataset critical building validating regression models predict days heading durum wheat specific climatic scenarios, aiding understanding optimizing wheat production timelines & locations. Variable importance DHE regression Predicted vs Actual DHE regression Residuals vs predicted DHE regression","code":"# Load sample data for regression task data(\"DurumWheatDHEWC\")  DurumWheatDHEWC <- icardaFIGSr::DurumWheatDHEWC   # lets sample DurumWheatDHEWC dataset  random_cols <- sample(colnames(DurumWheatDHEWC), 7)  # Note : we can still use the whole dataset for model training and testing.      # Select Y and predictors. DurumWheatDHEWC_sample <- DurumWheatDHEWC %>%    dplyr::select(DHE, all_of(random_cols))  # Check results DurumWheatDHEWC_sample #>     DHE  tmax_08   tmin_04 prec_01    bio_5  tmax_10     bio_4   tmin_03 #> 1   172 29.99600  3.064000      73 29.99600 18.54800 1031.8682 -3.128000 #> 2   178 29.83200  5.072000      43 30.04800 20.42400  777.1078  0.976000 #> 3   172 27.52000  4.368000      62 27.76800 18.00400  722.3430  0.064000 #> 4   172 27.60625  7.293750      78 27.75625 19.18125  688.2203  3.193750 #> 5   178 36.26800  7.300000      89 36.58800 23.40800  994.3781  2.392000 #> 6   178 30.22000  4.516000     109 30.28800 19.70800  785.1500  0.396000 #> 7   178 28.58800  4.224000      45 28.64800 18.85200  733.6318  0.048000 #> 8   176 39.02000  9.368000      75 39.66800 27.30000  964.2764  4.772000 #> 9   172 31.74000  8.512000     115 32.14400 22.23200  722.0439  4.496000 #> 10  186 27.29200  6.960000      94 27.53600 19.17200  672.0435  3.240000 #> 11  178 28.18000  3.988000      86 28.41600 17.86400  745.9142  0.064000 #> 12  169 33.20000  8.720000     100 33.34400 22.72000  748.7977  4.932000 #> 13  178 27.83200  4.036000      51 28.04400 18.07600  791.1317 -0.340000 #> 14  186 29.11600  7.188000      68 29.34800 20.05600  722.8493  3.304000 #> 15  178 28.69600  5.904000      55 28.70400 19.34800  724.1248  1.808000 #> 16  178 28.99200  7.308000      69 29.31600 20.15200  716.4745  3.492000 #> 17  178 25.92800  0.560000      36 25.92800 14.84400  912.1606 -5.552000 #> 18  178 29.07600  0.428000      34 29.07600 16.73600 1096.3679 -7.268000 #> 19  167 31.34000  8.392000     124 31.92400 21.61600  728.8510  4.472000 #> 20  178 33.06800  8.160000     112 33.41200 23.86400  741.2338  4.532000 #> 21  178 31.83600  8.140000     153 31.83600 22.96400  680.5397  4.916000 #> 22  178 30.94400  7.148000      70 31.26400 20.52400  743.2798  2.972000 #> 23  172 29.07600  7.148000     102 29.40800 20.18800  689.7987  3.296000 #> 24  172 33.16000 11.608000     116 33.16000 28.20000  687.9225  7.884000 #> 25  172 33.64000 12.348000     108 33.64000 29.04800  683.9843  8.748000 #> 26  178 31.32400  5.808000      46 31.47600 21.13200  812.9172  1.316000 #> 27  178 34.30400  6.448000      90 34.56800 21.40800  993.4868  1.128000 #> 28  178 33.14800  5.820000      82 33.44400 20.12000 1001.4965  0.456000 #> 29  178 27.73600  4.552000      66 27.93600 18.19600  720.1050  0.344000 #> 30  178 27.30800  7.424000      98 27.52800 19.52000  630.0882  3.820000 #> 31  178 28.20000  6.852000      73 28.36400 19.46000  702.7057  2.904000 #> 32  178 27.01200  3.448000      48 27.20800 17.16800  753.2673 -1.164000 #> 33  178 29.07600  7.148000     102 29.40800 20.18800  689.7987  3.296000 #> 34  178 28.03200  3.700000      41 28.13200 18.40400  751.0430 -0.900000 #> 35  178 25.09200  7.136000      62 25.14000 18.46000  605.3165  3.688000 #> 36  178 22.58800  2.244000      63 22.58800 14.08000  677.4630 -2.056000 #> 37  188 27.73600  4.552000      66 27.93600 18.19600  720.1050  0.344000 #> 38  174 30.43600  7.028000      83 30.92400 21.38000  701.4869  3.116000 #> 39  178 24.44400  7.000000      71 24.44400 18.30400  609.2167  3.496000 #> 40  178 29.82000  2.392000      21 29.82000 17.47200 1018.4033 -4.928000 #> 41  182 26.44800  6.392000      57 26.44800 18.90400  670.9153  2.308000 #> 42  178 25.46800 -1.116000      32 25.46800 12.90400  994.7368 -7.988000 #> 43  182 28.15600  4.824000      57 28.15600 18.24000  790.9460 -0.332000 #> 44  178 27.60800  6.460000      83 27.62400 19.28800  680.3213  2.888000 #> 45  178 27.30800  7.424000      98 27.52800 19.52000  630.0882  3.820000 #> 46  178 27.29200  6.960000      94 27.53600 19.17200  672.0435  3.240000 #> 47  169 29.75200  5.288000     187 29.75200 22.71200  709.8919  1.604000 #> 48  169 33.34400  8.768000      62 33.64800 25.72800  734.6581  5.256000 #> 49  178 30.68000  3.592000      52 30.68000 20.33600  829.4178 -0.812000 #> 50  169 31.57600  8.320000     115 32.07600 22.21600  723.6532  4.328000 #> 51  174 26.77500 11.154167      82 26.77500 23.53333  366.8831  9.733334 #> 52  178 30.83600  6.572000      97 31.32800 21.47600  730.1081  2.620000 #> 53  178 27.27778  7.227778     102 27.73889 19.77222  680.0123  3.544445 #> 54  164 39.28000  7.416000      88 39.68400 25.56800 1028.8179  2.792000 #> 55  169 32.50000  8.832000     115 32.99600 23.94800  721.1384  4.964000 #> 56  172 29.92000  7.828000     102 30.34800 20.35200  694.5842  4.044000 #> 57  167 37.71200  8.348000      60 37.79600 27.45600  891.1040  4.280000 #> 58  167 35.65200 11.624001      85 35.65200 28.24000  825.0877  6.800000 #> 59  174 28.19200  3.248000      45 28.19200 17.32400  886.8262 -2.356000 #> 60  172 38.69200 13.020000      12 39.62800 26.96000  829.3398  9.084000 #> 61  176 36.51600  8.308000      12 37.18800 24.20000  808.3892  5.216000 #> 62  172 36.51600  8.308000      12 37.18800 24.20000  808.3892  5.216000 #> 63  164 34.70000  7.992000      50 35.47600 24.10400  718.6138  5.476000 #> 64  164 33.22000 11.368000      33 33.22000 26.48800  578.0347  9.160000 #> 65  169 33.58800 11.692000      62 33.58800 25.83200  591.3364  9.744000 #> 66  178 36.98800 10.160000      22 37.60800 25.98800  756.7676  7.236000 #> 67  164 33.51200  8.300000      43 33.51200 26.80000  727.7678  5.096000 #> 68  164 33.15600  8.988000      47 33.15600 27.52000  710.1389  5.532000 #> 69  164 33.94000  8.672000      54 33.94000 27.18800  715.4806  5.696000 #> 70  164 34.71600  8.124001      59 34.72400 27.21200  730.0200  5.156000 #> 71  164 34.42400  7.836000      75 34.48000 26.87600  727.0957  4.868000 #> 72  164 33.27200  7.904000     120 33.27200 26.26800  708.6336  4.904000 #> 73  167 33.40400  7.116000      38 33.73200 25.24000  763.3324  3.140000 #> 74  167 33.08800  8.616000      52 33.43200 25.51600  737.6866  4.920000 #> 75  167 34.20800  8.024000      82 34.30400 26.68800  724.0570  5.008000 #> 76  167 39.80800  9.592000      60 40.46000 28.31600  947.7985  4.808000 #> 77  167 39.62400  9.356000      68 40.23200 28.10400  944.2841  4.704000 #> 78  167 40.42400  9.680000      71 41.02000 28.47200  959.8204  5.108000 #> 79  167 38.61600 10.400000      53 39.22400 27.66400  933.1219  5.260000 #> 80  167 34.10400 11.544000     125 34.10400 26.48000  810.0171  6.872000 #> 81  169 33.65200 11.604000     133 33.65200 26.26000  793.5392  7.144000 #> 82  164 35.81200  9.020000      42 35.81200 27.08000  836.1251  4.772000 #> 83  164 30.44800 14.020000     167 30.44800 27.98800  545.1089 10.492000 #> 84  167 31.88800  8.276000     153 31.88800 23.49200  664.2324  5.116000 #> 85  172 36.69200  7.344000      96 37.10800 23.23200 1015.4501  2.264000 #> 86  176 34.44800  6.280000      92 34.48000 23.21600  905.4482  1.788000 #> 87  174 37.77600  7.044000     103 38.11200 24.22000 1021.2753  2.136000 #> 88  174 37.90400  9.504000      61 38.79200 27.63200  940.4232  5.116000 #> 89  174 30.65200 12.856000     166 30.65200 25.94400  670.3594  9.168000 #> 90  172 35.94400  7.124000     106 36.26400 22.52000 1016.0784  1.940000 #> 91  178 26.36400  5.996000      58 26.46000 17.62000  687.8534  1.956000 #> 92  178 25.54400  7.016000     113 25.61200 18.82000  592.0856  3.280000 #> 93  178 26.37200  5.652000      58 26.42000 17.68000  687.7638  1.668000 #> 94  178 25.54400  7.016000     113 25.61200 18.82000  592.0856  3.280000 #> 95  178 38.47600  7.056000      93 39.14400 24.66400 1036.8070  2.460000 #> 96  174 36.89200  8.132000      91 37.08800 25.63600  916.9009  3.740000 #> 97  178 26.55600  3.068000      46 26.70000 16.11200  780.1105 -1.588000 #> 98  172 34.21600  8.160000      38 34.21600 26.02000  794.1812  3.912000 #> 99  174 30.73200 12.552000     166 30.73200 26.46400  648.8869  8.804000 #> 100 167 37.10400 11.304000      21 37.47200 28.42800  863.9432  6.320000 #> 101 167 35.75600 10.508000      46 35.75600 27.36400  617.1011  8.372000 #> 102 178 30.67200  5.076000      33 31.17200 20.02000  703.4542  2.040000 #> 103 164 36.03600 10.008000      15 37.15600 25.35200  746.0551  6.892000 #> 104 169 31.60000  8.108000      60 31.83200 20.86000  614.7405  5.028000 #> 105 178 31.18400 11.644000      79 31.18400 23.92400  468.2367  9.756000 #> 106 172 38.82800 13.924000      15 39.62000 27.33200  806.1729 10.700000 #> 107 172 31.80400  6.380000     118 31.80400 21.72400  663.1384  4.140000 #> 108 172 32.36400  6.464000     104 32.36400 21.82400  680.3736  4.180000 #> 109 164 32.59200  7.032000      81 32.85600 22.33600  680.1926  4.508000 #> 110 172 33.50800  7.532000      30 34.65200 22.33600  734.3494  4.472000 #> 111 174 30.49600  7.500000      23 31.39200 20.71600  674.7256  4.392000 #> 112 169 34.03200  8.236000      44 34.72000 22.52400  770.6617  5.272000 #> 113 174 33.32800 10.132000     159 33.32800 24.99600  624.0789  8.076000 #> 114 167 33.90800 10.008000     140 33.90800 25.70800  628.1129  8.000000 #> 115 172 31.58800  9.612000     109 31.58800 24.75200  565.8553  7.756000 #> 116 174 37.93600  7.396000      96 38.38800 24.98400  995.0492  2.896000 #> 117 174 30.58800  5.548000      44 30.64400 20.74800  795.6289  1.088000 #> 118 178 30.26800  4.652000      57 30.45200 20.10400  782.5659  0.388000 #> 119 178 29.16400  3.132000      43 29.16400 18.65200  779.7481 -1.236000 #> 120 178 39.92000 10.668000      75 40.56000 28.13200  961.6358  6.316000 #> 121 172 33.74400  7.532000     107 33.74400 23.57600  849.7675  3.124000 #> 122 178 31.35263 12.936842     115 31.35263 26.71579  634.2849  9.036842 #> 123 172 31.74000  8.512000     115 32.14400 22.23200  722.0439  4.496000 #> 124 167 35.86800 11.004000     115 35.86800 28.46800  737.8636  7.152000 #> 125 174 29.78800  4.052000      78 29.91200 19.75600  752.1466  0.280000 #> 126 169 34.50000  9.520000     122 35.17200 25.19200  724.5495  5.984000 #> 127 169 32.72400 10.176000     177 32.82800 24.70000  646.5800  7.196000 #> 128 169 34.08800  8.208000     103 34.36800 23.69600  740.8456  4.140000 #> 129 178 31.00800  5.700000      45 31.16800 21.11600  803.4934  1.224000 #> 130 178 26.85600  2.812000      60 26.85600 16.99600  772.0298 -1.672000 #> 131 178 28.90800  3.752000      57 29.01600 18.72800  786.7649 -0.644000 #> 132 178 30.89600  4.948000      48 30.89600 20.41600  822.2949  0.332000 #> 133 182 33.82800  6.152000      87 34.05200 20.87200 1003.6749  0.760000 #> 134 176 38.80800  8.412000      93 39.10000 25.91600  995.3826  3.676000 #> 135 169 38.66800  9.936000      73 39.38400 27.00800  962.7939  5.292000 #> 136 172 28.40400  6.560000      99 28.96000 20.22800  694.9699  2.800000 #> 137 167 34.68800  4.928000     109 34.68800 21.21600 1030.0599 -0.504000 #> 138 167 33.34400  8.768000      62 33.64800 25.72800  734.6581  5.256000 #> 139 178 28.96400  9.748000      71 28.96400 24.58800  428.4697  8.380000 #> 140 176 28.96400  9.748000      71 28.96400 24.58800  428.4697  8.380000 #> 141 178 32.46000  8.744000      46 32.74000 23.21200  631.4650  6.204000 #> 142 172 33.44400  7.504000      52 33.74400 23.34000  679.1700  4.712000 #> 143 178 32.73200  9.300000      92 32.73200 27.50800  661.4465  6.412000 #> 144 172 32.44400 10.312000      84 32.44400 27.62400  641.1365  7.176000 #> 145 172 40.37600  9.472000      75 40.95200 28.24000  962.0396  5.012000 #> 146 172 34.78000 10.844000      93 34.78000 27.15200  829.7251  6.324000 #> 147 172 34.67200  8.556000      40 34.67200 26.52800  804.2781  4.272000 #> 148 172 29.86400  8.108000     185 29.86400 22.72400  738.3915  3.488000 #> 149 172 33.18400 12.592000     144 33.18400 27.13200  731.0255  8.372000 #> 150 176 39.08000 10.600000      32 39.50400 29.62800  922.9731  5.800000 #> 151 178 33.16400  7.816000      59 33.16400 27.01200  716.3182  4.608000 #> 152 178 33.12000  8.868000      87 33.12000 27.39200  672.4055  6.136000 #> 153 172 34.20800 12.660000     118 34.20800 28.67600  720.9083  8.548000 #> 154 167 41.34400 11.104000      85 42.02000 29.48000  969.0424  7.328000 #> 155 172 29.18000  7.576000     199 29.18000 22.43600  717.5812  3.000000 #> 156 164 33.74000 11.788000      54 33.74000 26.11600  588.4982  9.835999 #> 157 164 32.00000  6.660000     111 32.32400 21.93200  675.8183  4.320000 #> 158 164 32.00000  6.660000     111 32.32400 21.93200  675.8183  4.320000 #> 159 167 32.29200  5.904000      57 32.29200 25.86400  733.6518  2.484000 #> 160 169 32.29200  5.904000      57 32.29200 25.86400  733.6518  2.484000 #> 161 172 27.56400  2.592000     147 27.56400 20.22800  693.3407 -1.268000 #> 162 164 39.76800 12.048000      39 40.44800 29.18000  961.7704  6.780000 #> 163 167 35.27200 11.388000     115 35.27200 28.65200  772.2361  7.116000 #> 164 178 34.73200 11.188000      68 34.73200 28.97600  644.2667  7.892000 #> 165 174 35.22000  9.076000      69 35.52800 26.11600  662.0358  6.696000 #> 166 178 33.96800 11.520000      33 34.46800 26.08800  576.8907  9.724000 #> 167 178 33.34400  8.560000      55 33.66400 25.70800  734.9302  4.964000 #> 168 172 30.69286 13.507143     153 30.69286 27.43571  574.4055 10.428572 #> 169 172 26.68400  3.316000      43 27.05200 16.74000  752.8312 -1.276000 #> 170 178 30.14000  6.116000      55 30.42800 19.72400  808.4551  1.516000 #> 171 178 28.69600  3.940000      47 28.72000 18.16800  831.3232 -1.076000 #> 172 178 25.34800  4.212000      48 25.34800 17.28800  694.9345 -0.044000 #> 173 178 28.08400  2.100000      39 28.08400 17.92400  815.6906 -2.556000 #> 174 172 33.62000  9.132000      53 33.62000 28.00000  683.8333  5.932000 #> 175 169 34.40400  8.464000      60 34.59600 24.79600  669.4826  6.380000 #> 176 182 30.07600  8.440001      57 30.20400 20.60400  564.0870  5.740000 #> 177 172 30.03200 12.440001     113 30.03200 23.46000  457.2107 10.924000 #> 178 167 31.09600 12.536000     158 31.09600 27.02000  635.5856  8.704000 #> 179 172 35.40400  6.992000      97 35.42400 24.22800  923.7162  2.540000 #> 180 188 30.94400  7.148000      70 31.26400 20.52400  743.2798  2.972000 #> 181 182 29.32400  4.664000      44 29.76000 18.92400  837.3220 -0.304000 #> 182 178 27.39200  6.544000      77 27.54400 19.01600  686.9943  2.640000 #> 183 184 35.63200  8.188000      78 35.94000 22.97600  986.1057  3.308000 #> 184 178 32.62800  9.424000     123 33.20000 23.16000  724.1036  5.536000 #> 185 178 39.28000 12.860000      24 40.29600 29.12000  947.2092  7.272000 #> 186 172 40.38000 10.016000      63 41.04000 28.73600  959.3826  5.232000 #> 187 172 36.21200  9.968000      61 36.21200 27.99600  829.4252  5.616000 #> 188 167 38.33200 11.320000      21 38.72800 28.48000  902.8373  6.228000 #> 189 174 30.50000 10.548000     178 30.50000 25.04800  685.8725  6.232000 #> 190 169 39.02000  9.368000      75 39.66800 27.30000  964.2764  4.772000 #> 191 178 39.68400  8.732000      70 40.22800 27.98800  947.0474  4.340000 #> 192 167 35.43200  9.380000      32 36.54400 24.92000  720.2234  6.800000 #> 193 167 33.73200 10.580000      95 33.73200 27.12800  758.0823  6.364000 ## Regression of DHE (days to heading) svm.DHE <- icardaFIGSr::tuneTrain(data = DurumWheatDHEWC_sample,                       y =  'DHE',                       method = 'svmLinear2',                       summary = defaultSummary,                       classProbs = FALSE,                       repeats = 3) #> Support Vector Machines with Linear Kernel  #>  #> 137 samples #>   7 predictor #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 124, 123, 123, 123, 124, 123, ...  #> Resampling results across tuning parameters: #>  #>   cost    RMSE      Rsquared   MAE      #>     0.25  4.475290  0.3332189  3.639160 #>     0.50  4.478288  0.3321966  3.634820 #>     1.00  4.483408  0.3316731  3.633663 #>     2.00  4.492265  0.3294722  3.635448 #>     4.00  4.504773  0.3266474  3.639368 #>     8.00  4.519448  0.3232051  3.651156 #>    16.00  4.537546  0.3205538  3.664934 #>    32.00  4.543125  0.3193189  3.669879 #>    64.00  4.555453  0.3167104  3.677691 #>   128.00  4.560078  0.3152932  3.681401 #>  #> RMSE was used to select the optimal model using the smallest value. #> The final value used for the model was cost = 0.25. #> Support Vector Machines with Linear Kernel  #>  #> 137 samples #>   7 predictor #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 123, 123, 124, 123, 123, 124, ...  #> Resampling results across tuning parameters: #>  #>   cost  RMSE      Rsquared   MAE      #>   0.25  4.441064  0.3451608  3.609214 #>   0.50  4.436608  0.3483457  3.596602 #>   0.75  4.450294  0.3473019  3.599619 #>   1.00  4.461562  0.3445030  3.607569 #>   1.25  4.463952  0.3441880  3.610179 #>  #> RMSE was used to select the optimal model using the smallest value. #> The final value used for the model was cost = 0.5. svm.DHE$VariableImportance svm.DHE$Quality_metrics #>      RMSE  Rsquared       MAE  #> 4.4294787 0.3721135 3.5262731 svm.DHE$`Predicted vs Actual Plot` #> `geom_smooth()` using formula = 'y ~ x' svm.DHE$`Residuals Vs. Predicted Plot` svm.DHE$Training #> Support Vector Machines with Linear Kernel  #>  #> 137 samples #>   7 predictor #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 123, 123, 124, 123, 123, 124, ...  #> Resampling results across tuning parameters: #>  #>   cost  RMSE      Rsquared   MAE      #>   0.25  4.441064  0.3451608  3.609214 #>   0.50  4.436608  0.3483457  3.596602 #>   0.75  4.450294  0.3473019  3.599619 #>   1.00  4.461562  0.3445030  3.607569 #>   1.25  4.463952  0.3441880  3.610179 #>  #> RMSE was used to select the optimal model using the smallest value. #> The final value used for the model was cost = 0.5. svm.DHE$Tuning  #> Support Vector Machines with Linear Kernel  #>  #> 137 samples #>   7 predictor #>  #> Pre-processing: centered (7), scaled (7)  #> Resampling: Cross-Validated (10 fold, repeated 3 times)  #> Summary of sample sizes: 124, 123, 123, 123, 124, 123, ...  #> Resampling results across tuning parameters: #>  #>   cost    RMSE      Rsquared   MAE      #>     0.25  4.475290  0.3332189  3.639160 #>     0.50  4.478288  0.3321966  3.634820 #>     1.00  4.483408  0.3316731  3.633663 #>     2.00  4.492265  0.3294722  3.635448 #>     4.00  4.504773  0.3266474  3.639368 #>     8.00  4.519448  0.3232051  3.651156 #>    16.00  4.537546  0.3205538  3.664934 #>    32.00  4.543125  0.3193189  3.669879 #>    64.00  4.555453  0.3167104  3.677691 #>   128.00  4.560078  0.3152932  3.681401 #>  #> RMSE was used to select the optimal model using the smallest value. #> The final value used for the model was cost = 0.25."},{"path":"/articles/ML_Workflows.html","id":"multiclass-classification","dir":"Articles","previous_headings":"tuneTrain()","what":"Multiclass classification","title":"ML_Workflows","text":"case, use DurumWheatDHEWC dataset create days heading classes variable (DHE_Class) fit multiclass model. DHE_classes descibed follow : 1 (Early): Represents samples/observations early days heading, indicating adaptability shorter growing seasons favorable early-season conditions. 2 (Intermediate): Represents samples/observations moderate days heading, indicating typical average responses given environmental conditions. 3 (Late): Represents samples/observations late days heading, suggesting adaptability longer growing seasons late-season conditions. levels can three different ranges.","code":"## Multiclass classification of DHE Classes with imbalanced data   # Create DHE Classes from DurumWheatDHEWC dataset  DurumWheatDHEWC_sample$DHE_class <- ifelse(    DurumWheatDHEWC_sample$DHE <= 172,\"1\",    ifelse(DurumWheatDHEWC_sample$DHE <= 180, \"2\", \"3\")  )   # convert to factor   DurumWheatDHEWC_sample$DHE_class <- factor(DurumWheatDHEWC_sample$DHE_class)     # Count classes for data imbalance check DurumWheatDHEWC_sample%>%    count(DHE_class) #>   DHE_class  n #> 1         1 96 #> 2         2 87 #> 3         3 10 ## Not run: # Run Multiclass Classification knn.DHE_class <- icardaFIGSr::tuneTrain(data = DurumWheatDHEWC_sample,                               y =  'DHE_class',                               method = 'rf',                               parallelComputing = TRUE,                               summary = multiClassSummary,                               imbalanceMethod =\"up\", # Here we upsample less represented class (3)                               imbalanceThreshold = 0.2,                               classProbs = TRUE,                               repeats = 3) knn.DHE_class ## End(Not run)"},{"path":"/articles/ML_Workflows.html","id":"splitdata","dir":"Articles","previous_headings":"","what":"splitData()","title":"ML_Workflows","text":"","code":"# Subset septoriaDurumWC where column names having 3, ex tmin3, prec13 septoriaDurumWC_subset <- icardaFIGSr::septoriaDurumWC|>   dplyr::select(ST_S,contains(\"3\"))  # split data septoriaDurumWC_subset_split <- icardaFIGSr::splitData(septoriaDurumWC,                         seed = 123, y=\"ST_S\", p=0.7)  # Check results names(septoriaDurumWC_subset_split) #> [1] \"trainset\" \"testset\""},{"path":"/articles/ML_Workflows.html","id":"getmetrics","dir":"Articles","previous_headings":"","what":"getMetrics()","title":"ML_Workflows","text":"","code":"# Call the ST_S knn model fitted in tunTrain function section  data.test <- knn.ST_S$`Test Data`  pred.ST_S <- predict(knn.ST_S$Tuning, newdata = data.test[ , -1])  metrics.knn.ST_S <- icardaFIGSr::getMetrics(y = data.test$ST_S,                                        yhat = pred.ST_S, classtype = 2)  metrics.knn.ST_S #> $Metrics #>                            Metrics #> Accuracy                     0.729 #> 95% CI              (0.597, 0.836) #> No Information Rate          0.525 #> P-Value [Acc > NIR]     0.00113022 #> Kappa                        0.458 #> Sensitivity                   0.71 #> Specificity                   0.75 #>  #> $CM #>    R  S #> R 22  7 #> S  9 21"},{"path":"/articles/ML_Workflows.html","id":"getmetricspca","dir":"Articles","previous_headings":"","what":"getMetricsPCA()","title":"ML_Workflows","text":"Please run code chunk test getMetricsPCA() model rutrned tuneTrain().","code":"## Run Binary classification of ST_S with balanced data using random forest rf.ST_S <- icardaFIGSr::tuneTrain(                       data = as.data.frame(septoriaDurumWC_sample),                       y =  'ST_S',                       method = 'rf', # using rf algorithm                       summary = multiClassSummary, # Important for classification tasks                         parallelComputing = T,                       repeats = 3,                       process = c(\"center\",\"scale\"),                       classProbs = TRUE) # Important for classification tasks  # get test data from one of the model to be used for prediction data.test <- rf.ST_S$`Test Data`  # Obtain predictions from previously run models : knn.ST_S and rf.ST_S  pred.knn.ST_S <- predict(knn.ST_S$Tuning, newdata = data.test[ , -1]) pred.rf.ST_S <- predict(rf.ST_S$Tuning, newdata = data.test[ , -1])  # Get metrics for your model using computed metrics.knn.ST_S metrics.knn.ST_S <- metrics.knn.ST_S metrics.rf.ST_S <- icardaFIGSr::getMetrics(y = data.test$ST_S,                          yhat = pred.rf.ST_S, classtype = 2)  # Indexing for 2-class models to remove extra column with # names of performance measures metrics.all <- cbind(metrics.knn.ST_S, metrics.rf.ST_S)    ## check data structure metrics.all metrics.all[1,1] metrics.all[2,1]"},{"path":"/articles/ML_Workflows.html","id":"varimppred","dir":"Articles","previous_headings":"","what":"varimpPred()","title":"ML_Workflows","text":"varimpPred() returns classes probabilities variables importance plots tables.","code":"# Calculate variable importance for classification model  data(\"septoriaDurumWC\")  septoriaDurumWC <- as.data.frame(septoriaDurumWC)  knn.varimp<- varimpPred(newdata = knn.ST_S$`Test Data`,                                       y='ST_S',                                       model = knn.ST_S$Tuning,                                       positive = \"R\",                                       auc = TRUE, predict = TRUE)  knn.varimp # # Calculate variable importance and obtain class probabilities # # with highest measure #  testdata <- rf.DHE_class$`Test Data` # #  # # # Obtain variable importance plot for only first 20 variables # rf.varimp <- icardaFIGSr::varimpPred(newdata = testdata, #                                      y = 'DHE_Class', #                             positive = 'Cl_1',  #                             model = rf.DHE_Class$Tuning, # can also use Training object #                             ROC = TRUE, predict = TRUE, top = 20) # # # Check results #  rf.varimp"},{"path":"/articles/Sites_climate.html","id":"getdaily","dir":"Articles","previous_headings":"","what":"getDaily()","title":"Sites_climate","text":"getDaily() Retrieves Daily Weather Data ICARDA database given vector site_codes vector climate variables among possible choices. example demonstrates use function retrieve average daily temperature (tavg) subset sites.","code":"### Load Sample Data septoriaDurumWC <- icardaFIGSr::septoriaDurumWC #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found durumDaily <- icardaFIGSr::durumDaily"},{"path":"/articles/Sites_climate.html","id":"extract-site-codes","dir":"Articles","previous_headings":"getDaily()","what":"Extract Site Codes","title":"Sites_climate","text":"durumDaily dataset contains site metadata, including site codes. , extract site codes specify locations data retrieval.","code":"Sites <- as.character(durumDaily$site_code) # Retrieve Daily Data Daily_data <- icardaFIGSr::getDaily(sites = Sites[1:3],                                     var = c(\"tavg\")) #> Data loading started .... #> Loading completed! #> Using tavg as value column: use value.var to override.  ## Here we can visualize the output of getDaily()"},{"path":"/articles/Sites_climate.html","id":"resahpe-output-optional","dir":"Articles","previous_headings":"getDaily()","what":"Resahpe output (optional)","title":"Sites_climate","text":"resulting dataset contains site codes, variable keys (e.g., tavg), corresponding values day. can now use data analysis visualization.","code":"# Reshape Data for further visualization and analysis Daily_data <- Daily_data |>   tidyr::gather(-site_code, key = \"key\", value = \"value\")  # Preview the Results head(Daily_data) #>    site_code   key     value #> 1 DZA89-B:17 tavg1 10.408824 #> 2  IND28::42 tavg1 11.567647 #> 3    UKR::16 tavg1 -4.354412 #> 4 DZA89-B:17 tavg2  8.585295 #> 5  IND28::42 tavg2 13.157355 #> 6    UKR::16 tavg2 -2.398529"},{"path":"/articles/Sites_climate.html","id":"extractwcdata","dir":"Articles","previous_headings":"","what":"extractWcdata()","title":"Sites_climate","text":"extractWCdata() upgraded version raster:getData() function. allows extract worldclim v2.1 latest updates.  extractWCdata() function automatically downloads WorldClim 2.1 data within extent interest based specified coordinates Biogeo davis repository. later available,- check issue details -, prompts download variables interest official website worldclim. case, worldclim/var/ folder created working directory. can either copy downloaded .tiff files created path folder use full path. steps followed get final data returned extractWCdata(). describe steps follow.","code":""},{"path":"/articles/Sites_climate.html","id":"simulate-raster-files-as-worldclim-files","dir":"Articles","previous_headings":"extractWcdata()","what":"Simulate raster files as worldclim files","title":"Sites_climate","text":"Simulated temperature & precipitation rasters","code":"# Load necessary libraries library(raster) #> Loading required package: sp  # Create two raster layers for tavg and prec tavg <- raster(nrows = 10, ncols = 10, xmn = -180, xmx = 180, ymn = -90, ymx = 90) values(tavg) <- runif(ncell(tavg), min = 15, max = 30)  prec <- raster(nrows = 10, ncols = 10, xmn = -180, xmx = 180, ymn = -90, ymx = 90) values(prec) <- runif(ncell(prec), min = 100, max = 500)  # Stack both rasters into a RasterStack clim_stack <- raster::stack(tavg, prec)  # Name rasters names(clim_stack) <- c(\"tavg\", \"prec\")  # Visualize results plot(clim_stack)"},{"path":"/articles/Sites_climate.html","id":"simulate-georeferenced-sites","dir":"Articles","previous_headings":"extractWcdata()","what":"Simulate georeferenced sites","title":"Sites_climate","text":"","code":"library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE  # Define coordinates in a data frame coords <- data.frame(site =c(\"site1\",\"site2\") ,long = c(10, 70), lat = c(45, -20))  # Convert to sf object with WGS 84 projection sf_coords <- sf::st_as_sf(coords, coords = c(\"long\", \"lat\"), crs = 4326)  # View sf object sf_coords #> Simple feature collection with 2 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 10 ymin: -20 xmax: 70 ymax: 45 #> Geodetic CRS:  WGS 84 #>    site       geometry #> 1 site1  POINT (10 45) #> 2 site2 POINT (70 -20)"},{"path":"/articles/Sites_climate.html","id":"extract-worldclimat-data","dir":"Articles","previous_headings":"extractWcdata()","what":"Extract Worldclimat data","title":"Sites_climate","text":"example, demonstrate use function extract average temperature = tavg precipitaton = prec data set locations. can also choose one many climatic variables, like standard 19 bios different resolutions, precipitation, solar radiation wind speed.","code":"# Extract values from raster stack extracted_values <- raster::extract(clim_stack, sf_coords)  # Bind to sites sites_climate <- cbind(sf_coords[,1],extracted_values)  # Check final results : typical result of extractWCdata head(sites_climate) #> Simple feature collection with 2 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 10 ymin: -20 xmax: 70 ymax: 45 #> Geodetic CRS:  WGS 84 #>    site     tavg     prec       geometry #> 1 site1 26.12282 199.4155  POINT (10 45) #> 2 site2 29.21646 384.3885 POINT (70 -20) # Please run the following code chunk for retireving real data.  library(sf) library(icardaFIGSr)  # Define longitude and latitude ranges around Morocco long <- seq(-11, 11, length.out = 10) # Longitude range lat <- seq(25, 59, length.out = 10)   # Latitude range  # Create a grid of coordinates sf <- expand.grid(long = long, lat = lat)  # Extract climate data (WorldClim 2.1) using the grid sf.df0 <- extractWCdata(   sf,   long = 'long',   lat = 'lat',   var = c('tavg',\"prec\"),  # climatic variables   res = 2.5        # Spatial resolution )  # Preview the extracted data print(head(sf.df0))  ## Or list the downloaded climate data from worldclim folder ## then use them for your analysis."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Khadija Aziz. Author. Zakaria Kehel. Author, maintainer. Bancy Ngatia. Author. Khadija Aouzal. Author. Chafik Analy. Author, contributor. Zainab Azough. Contributor. Amal Ibnelhobyb. Contributor. Fawzy Nawar. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aziz K, Kehel Z, Ngatia B, Aouzal K, Analy C (2025). icardaFIGSr: Subsetting using Focused Identification Germplasm Strategy (FIGS). R package version 1.0.2.","code":"@Manual{,   title = {icardaFIGSr: Subsetting using Focused Identification of the Germplasm Strategy (FIGS)},   author = {Khadija Aziz and Zakaria Kehel and Bancy Ngatia and Khadija Aouzal and Chafik Analy},   year = {2025},   note = {R package version 1.0.2}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"icardaFIGSr package provides tools applying Focused Identification Germplasm Strategy (FIGS) genebank data. FIGS, users can subset collections efficiently identify promising accessions based traits, environmental data, statistical workflows. package designed support researchers genebank managers identification targeted germplasm subsets plant breeding, research & developpement, conservation purposes.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"Access preprocess genebank environmental datasets. Handle climatic data crop-specific parameters effectively. Train machine learning models flexible workflows classification regression. Generate variable importance metrics predictions. Evaluate model performance using tools like ROC curves confusion matrices. Create intuitive plots climatic phenotypic data. Explore spatial statistical patterns genebank collections. Access preloaded datasets DurumWheatDHEWC, BarleyRNOWC, FIGS subsets.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"Install latest release CRAN: , install development version GitHub:","code":"install.packages(\"icardaFIGSr\") devtools::install_github(\"Analychaf/icardaFIGSr\")"},{"path":[]},{"path":"/index.html","id":"load-the-package","dir":"","previous_headings":"Getting Started","what":"Load the Package","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"","code":"library(icardaFIGSr)"},{"path":[]},{"path":"/index.html","id":"id_1-load-a-built-in-dataset","dir":"","previous_headings":"Getting Started > Example Workflow","what":"1. Load a Built-in Dataset","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"","code":"data(\"DurumWheatDHEWC\") head(DurumWheatDHEWC)"},{"path":"/index.html","id":"id_2-generate-variable-importance","dir":"","previous_headings":"Getting Started > Example Workflow","what":"2. Generate Variable Importance","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"","code":"# Load data and train a classification model model <- tuneTrain(data = DurumWheatDHEWC, y = 'DHE', method = 'rf')  # Evaluate variable importance var_imp <- varimpPred(newdata = model$`Test Data`, y = 'DHE', model = model$Model) var_imp$VariableImportancePlot"},{"path":"/index.html","id":"id_3-extract-onset-data","dir":"","previous_headings":"Getting Started > Example Workflow","what":"3. Extract Onset Data","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"","code":"# Extract climatic data based on onset of planting onset_data <- getOnset(sites = unique(DurumWheatDHEWC$SiteCode), crop = 'ICDW', var = c(\"tavg\", \"prec\")) head(onset_data[[1]])"},{"path":"/index.html","id":"id_4-visualize-spatial-data","dir":"","previous_headings":"Getting Started > Example Workflow","what":"4. Visualize Spatial Data","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"","code":"# Map accessions by site mapAccessions(data = DurumWheatDHEWC, longitude = \"Longitude\", latitude = \"Latitude\", site_id = \"SiteCode\")"},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"Comprehensive tutorials examples available vignettes: Crop Data Analysis Machine Learning Workflows Climate Data Integration view vignettes locally:","code":"browseVignettes(\"icardaFIGSr\")"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"welcome contributions icardaFIGSr! Please see Contributing Guidelines details get involved.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"package licensed MIT License. See LICENSE file details.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"project developed contributions :  - Zakaria Kehel (Maintainer Author) - Khadija Aziz (Author) - Khadija Aouzal (Author) - Chafik Analy (Author) - Bancy Ngatia (Author) - Zainab Azough, Amal Ibnelhobyb, Fawzy Nawar (Contributors)","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Subsetting using Focused Identification of the Germplasm Strategy (FIGS)","text":"questions, please contact :  Zakaria Kehel: z.kehel@cgiar.org Khadija Aouzal: k.aouzal@cgiar.org Explore ICARDA FIGS R Package leverage advanced tools optimize genebank management research.","code":""},{"path":"/reference/BarleyRNOWC.html","id":null,"dir":"Reference","previous_headings":"","what":"BarleyRNOWC — BarleyRNOWC","title":"BarleyRNOWC — BarleyRNOWC","text":"200 samples kernel row number observations barley collection 55 corresponding worldclim data.","code":""},{"path":"/reference/BarleyRNOWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BarleyRNOWC — BarleyRNOWC","text":"","code":"data(\"BarleyRNOWC\")"},{"path":"/reference/BarleyRNOWC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BarleyRNOWC — BarleyRNOWC","text":"details climate data can found worldclim","code":""},{"path":"/reference/BarleyRNOWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BarleyRNOWC — BarleyRNOWC","text":"","code":"if(interactive()){  # Load barley RNO data with world climatic variables obtained from WorldClim database  data(\"BarleyRNOWC\")  }"},{"path":"/reference/DurumWheatDHEWC.html","id":null,"dir":"Reference","previous_headings":"","what":"DurumWheatDHEWC — DurumWheatDHEWC","title":"DurumWheatDHEWC — DurumWheatDHEWC","text":"193 samples Days heading durum wheat collection 55 worldclim data.","code":""},{"path":"/reference/DurumWheatDHEWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DurumWheatDHEWC — DurumWheatDHEWC","text":"","code":"data(\"DurumWheatDHEWC\")"},{"path":"/reference/DurumWheatDHEWC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DurumWheatDHEWC — DurumWheatDHEWC","text":"details climate data can found worldclim","code":""},{"path":"/reference/DurumWheatDHEWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DurumWheatDHEWC — DurumWheatDHEWC","text":"","code":"if(interactive()){  # Load durum wheat DHE data with world climatic variables obtained from WorldClim database  data(\"DurumWheatDHEWC\")  }"},{"path":"/reference/FIGS.html","id":null,"dir":"Reference","previous_headings":"","what":"FIGS — FIGS","title":"FIGS — FIGS","text":"FIGS subset wheat sodicity resistance constructed using harmonized world soil database HWSD","code":""},{"path":"/reference/FIGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIGS — FIGS","text":"","code":"data(\"FIGS\")"},{"path":"/reference/FIGS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FIGS — FIGS","text":"data frame 201 rows 15 variables","code":""},{"path":"/reference/FIGS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"FIGS — FIGS","text":"HWSD","code":""},{"path":"/reference/FIGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FIGS — FIGS","text":"","code":"if(interactive()){  data(\"FIGS\") }"},{"path":"/reference/durumDaily.html","id":null,"dir":"Reference","previous_headings":"","what":"durumDaily — durumDaily","title":"durumDaily — durumDaily","text":"200 sites durum wheat collection daily climatic data.","code":""},{"path":"/reference/durumDaily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"durumDaily — durumDaily","text":"","code":"data(\"durumDaily\")"},{"path":"/reference/durumDaily.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"durumDaily — durumDaily","text":"data includes site unique identifier daily data 4 climatic variables (tmin, tmax, precipitation relative humidity)","code":""},{"path":"/reference/durumDaily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"durumDaily — durumDaily","text":"","code":"if(interactive()){  # Load durum wheat data with their daily climatic variables obtained from ICARDA database  data(\"durumDaily\") }"},{"path":"/reference/durumWC.html","id":null,"dir":"Reference","previous_headings":"","what":"durumWC — durumWC","title":"durumWC — durumWC","text":"200 sites durum wheat collection world clim data.","code":""},{"path":"/reference/durumWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"durumWC — durumWC","text":"","code":"data(\"durumWC\")"},{"path":"/reference/durumWC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"durumWC — durumWC","text":"data includes site unique identifier, longitude, latitude 55 worldclim data worldclim","code":""},{"path":"/reference/durumWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"durumWC — durumWC","text":"","code":"if(interactive()){  # Load durum wheat data with world climatic variables obtained from WorldClim database  data(\"durumWC\")  }"},{"path":"/reference/extractWCdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"extractWCdata returns data frame based specified climatic variables. function modifies getData function raster R package extract world climate data version 2.1 instead version 1.4.","code":""},{"path":"/reference/extractWCdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"","code":"extractWCdata(sites, long, lat, var, res = 2.5)"},{"path":"/reference/extractWCdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"sites object class \"data.frame\" coordinates sites extract data. long character. Name column sites longitude. lat character. Name column sites latitude. var character. Climatic variable(s) extracted: 'tavg', 'tmin', 'tmax', 'prec', 'bio', 'srad', 'vapr', 'wind'. res numeric. Spatial resolution. Default 2.5.","code":""},{"path":"/reference/extractWCdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"object class \"data.frame\" specified climatic variables coordinates sites.","code":""},{"path":"/reference/extractWCdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"grid can created particular coordinates used input sites (see section 'Examples'). extractWCdata use given coordinates extract data WorldClim 2.1 database. extracted data likely contain NAs sites climate data available. removed imputed using data make predictions.","code":""},{"path":"/reference/extractWCdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"Zakaria Kehel, Fawzy Nawar, Bancy Ngatia, Khadija Aouzal, Chafik Analy","code":""},{"path":"/reference/extractWCdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting historical climate data from WorldClim 2.1 — extractWCdata","text":"","code":"if (FALSE) { # \\dontrun{  # Create grid  long <- seq(-16, 115, length = 3)  lat <- seq(25, 59, length = 3)  sf <- expand.grid(x = sp1, y = sp2)   # Extract data using grid  sp.df0 <- extractWCdata(sf, long = 'long', lat = 'lat', var = 'bio')  sp.df <- na.omit(sp.df0)  } # }"},{"path":"/reference/getAccessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"Return data frame accession data specified crop.","code":""},{"path":"/reference/getAccessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"","code":"getAccessions(   crop = \"\",   ori = NULL,   IG = \"\",   doi = FALSE,   taxon = FALSE,   collectionYear = FALSE,   coor = FALSE,   available = FALSE )"},{"path":"/reference/getAccessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"crop character. Crop get accession data. See section 'Details' available crops use getCrops function. Default: \"\". ori string. Country origin using ISO 3166-1 alpha-3 country codes. Default: NULL. IG integer. Unique identifier accession. Default: \"\". doi boolean. TRUE , function return digital object identifiers DOI accessions. Default: FALSE. taxon boolean. TRUE, function return taxon information accessions. Default: FALSE. collectionYear boolean. TRUE, function return year collecting mission. Default: FALSE. coor boolean. TRUE, returns georeferenced accessions containing longitude latitude. Default: FALSE. available boolean. TRUE, returns availability accessions distribution, Default: FALSE.","code":""},{"path":"/reference/getAccessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"data frame accession passport data specified crop crop locations ori.","code":""},{"path":"/reference/getAccessions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"Types crops available include: 'ICAG' Aegilops 'ICB' Barley 'ICBW' Bread wheat 'ILC' Chickpea 'ICDW' Durum wheat 'ILB' Faba bean 'BPL' Faba bean BPL 'IFMI' Forage range 'IFLA' Lathyrus 'ILL' Lentil 'IFMA' Medicago annual 'IC' mandate cereals 'IFPI' Pisum 'ICPW' Primitive wheat 'IFTR' Trifolium 'IFVI' Vicia 'ICWH' Wheat hybrids 'ICWW' Wheat wild relatives 'ILWC' Wild Cicer 'ICWB' Wild Hordeum 'ILWL' Wild Lens 'ICWT' Wild Triticum Alternatively, list available crops can fetched ICARDA's online server using getCrops.","code":""},{"path":"/reference/getAccessions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"Khadija Aouzal, Amal Ibnelhobyb, Zakaria Kehel, Fawzy Nawar","code":""},{"path":"/reference/getAccessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting Accession Data from ICARDA's Genebank Documentation System — getAccessions","text":"","code":"if (FALSE) { # \\dontrun{  # Obtain accession data for durum wheat  durum <- getAccessions(crop = 'Durum wheat', coor = TRUE)  } # }"},{"path":"/reference/getCropTraits.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"Return data frame containing traits associated particular crop, description related identifiers.","code":""},{"path":"/reference/getCropTraits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"","code":"getCropTraits(crop)"},{"path":"/reference/getCropTraits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"crop character. Crop get available traits.","code":""},{"path":"/reference/getCropTraits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"data frame traits associated crop specified crop.","code":""},{"path":"/reference/getCropTraits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"getCropTraits returns data frame traits together IDs coding system used trait. Possible inputs crop include: 'ICAG' Aegilops 'ICB' Barley 'ICBW' Bread wheat 'ILC' Chickpea 'ICDW' Durum wheat 'ILB' Faba bean 'BPL' Faba bean BPL 'IFMI' Forage range 'IFLA' Lathyrus 'ILL' Lentil 'IFMA' Medicago annual 'IC' mandate cereals 'IFPI' Pisum 'ICPW' Primitive wheat 'IFTR' Trifolium 'IFVI' Vicia 'ICWH' Wheat hybrids 'ICWW' Wheat wild relatives 'ILWC' Wild Cicer 'ICWB' Wild Hordeum 'ILWL' Wild Lens 'ICWT' Wild Triticum list available crops use input crop can also obtained ICARDA's online server using getCrops.","code":""},{"path":"/reference/getCropTraits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"Khadija Aouzal, Amal Ibnelhobyb, Zakaria Kehel, Fawzy Nawar, Chafik Analy","code":""},{"path":"/reference/getCropTraits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting Traits Associated with Crops from the ICARDA's Genebank Documentation System — getCropTraits","text":"","code":"if (FALSE) { # \\dontrun{  # Get traits for bread wheat  breadTraits <- getCropTraits(crop = 'Bread wheat') } # }"},{"path":"/reference/getCrops.html","id":null,"dir":"Reference","previous_headings":"","what":"Crops Available in ICARDA's Genebank — getCrops","title":"Crops Available in ICARDA's Genebank — getCrops","text":"function allows obtain list crops available ICARDA's Genebank Documentation System, returns list codes names available crops.","code":""},{"path":"/reference/getCrops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crops Available in ICARDA's Genebank — getCrops","text":"","code":"getCrops()"},{"path":"/reference/getCrops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crops Available in ICARDA's Genebank — getCrops","text":"list containing crops available ICARDA's Genebank Documentation System.","code":""},{"path":"/reference/getCrops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crops Available in ICARDA's Genebank — getCrops","text":"crop codes names fetched ICARDA's online server.","code":""},{"path":"/reference/getCrops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Crops Available in ICARDA's Genebank — getCrops","text":"Zakaria Kehel, Fawzy Nawar","code":""},{"path":"/reference/getCrops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crops Available in ICARDA's Genebank — getCrops","text":"","code":"if (FALSE) { # \\dontrun{  # Get list of available crops  crops <- getCrops()  } # }"},{"path":"/reference/getDaily.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Daily Climatic Variables — getDaily","title":"Extracting Daily Climatic Variables — getDaily","text":"function extracts daily values climatic variables ICARDA Data, returns list data frame based specified climatic variables. variable 365 values day calendar year.","code":""},{"path":"/reference/getDaily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Daily Climatic Variables — getDaily","text":"","code":"getDaily(sites, var, cv = FALSE)"},{"path":"/reference/getDaily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Daily Climatic Variables — getDaily","text":"sites character. Names sites extract data. var character. Climatic variable(s) extracted. cv boolean. TRUE, returns data frame coefficient variation variable day calendar year. Default: FALSE.","code":""},{"path":"/reference/getDaily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting Daily Climatic Variables — getDaily","text":"object specified climatic variables specified site code sites. cv = TRUE, object list containing two data frames: first one average daily values climatic variables, second one daily coefficient variation climatic variable. cv = FALSE, object data frame average daily values climatic variables.","code":""},{"path":"/reference/getDaily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting Daily Climatic Variables — getDaily","text":"ICARDA data accessible either local directory computer online repository. getDaily extract climatic variables specified var sites specified sites. .         function extracts average daily values starting first day calendar year, last day calendar year. Thus, returning 365 columns daily values created variable.","code":""},{"path":[]},{"path":"/reference/getDaily.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting Daily Climatic Variables — getDaily","text":"Zakaria Kehel, Bancy Ngatia","code":""},{"path":"/reference/getDaily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting Daily Climatic Variables — getDaily","text":"","code":"if (FALSE) { # \\dontrun{  # Extract daily data for durum wheat  durum <- getAccessions(crop = 'Durum wheat', coor = TRUE)  daily <- getDaily(sites = levels(as.factor(durum$SiteCode)),                    var = c('tavg', 'prec', 'rh'), cv = TRUE)   # Get data frame with coefficient of variation from list object  # returned (when cv = TRUE)  daily.cv <- daily[[2]]  } # }"},{"path":"/reference/getGrowthPeriod.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"Calculates growing degree days (GDD) well cumulative GDD, returns list various data frames based specified arguments.","code":""},{"path":"/reference/getGrowthPeriod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"","code":"getGrowthPeriod(sitecode, crop, base, max, gdd = FALSE)"},{"path":"/reference/getGrowthPeriod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"sitecode expression. Vector names sites extract onset data. crop character. Type crop ICARDA database. See section 'Details' crops calculations available. base integer. Minimum temperature constraint crop. max integer. Maximum temperature constraint crop. gdd boolean. TRUE, returns data frame containing calculated GDD accumulated GDD together climatic variables used calculations. Default: FALSE.","code":""},{"path":"/reference/getGrowthPeriod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"list object different data frames depending specified option gdd. gdd = TRUE, object list containing three data frames: first one lengths different growing stages, second one original onset data phenological variables, third one calculated GDD accumulated GDD sites specified sitecode. gdd = FALSE, object list containing two data frames: first one lengths different growing stages, second one original onset data phenological variables sites specified sitecode.","code":""},{"path":"/reference/getGrowthPeriod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"Growing degree days various crops calculated using average daily minimum maximum temperature values obtained onset data. temperature constraints specified base max first applied calculations done. constraints ensure low high temperatures prevent growth particular crop included. Crops GDD calculations available include: 'Durum wheat', 'Bread wheat', 'Barley', 'Chickpea', 'Lentil'. can supplied options argument crop. Cumulative GDD values determine length different growing stages. Growing stages vary depending type crop. Durum wheat, bread wheat barley five growth stages, .e. beginning heading, beginning completion flowering, beginning completion grain filling. Chickpea lentil four growth stages, .e. beginning flowering, completion 50% flowering, beginning seed filling, completion 90% maturity (chickpea) full maturity (lentil). length full growth cycle crop site also given output data frame.","code":""},{"path":"/reference/getGrowthPeriod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"Khadija Aouzal, Zakaria Kehel, Bancy Ngatia, Chafik Analy","code":""},{"path":"/reference/getGrowthPeriod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculating Growing Degree Days and Lengths of Growth Stages for Various Crops Using Onset Data from ICARDA's Database — getGrowthPeriod","text":"","code":"if (FALSE) { # \\dontrun{  # Calculate GDD for durum wheat   data(durumDaily)    durumDailysubset     growth <- getGrowthPeriod(sitecode = levels(as.factor(durumDaily$site_code))[1:3],                            crop = 'Durum wheat', base = 0,                            max = 35, gdd = TRUE)   # Get dataframe with lengths of growth stages from list  # object returned  growth.lengths <- growth[[1]]   # Get dataframe with phenotypic variables from list  # object returned  growth.pheno <- growth[[2]]   # Get dataframe with GDD, cumulative GDD and climatic  # variables from list object returned (when gdd = TRUE)  growth.gdd <- growth[[3]]  } # }"},{"path":"/reference/getMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance Measures for classification tasks — getMetrics","title":"Performance Measures for classification tasks — getMetrics","text":"function allows obtain performance measures Confusion Matrix, returns data frame containing performance measures confusion matrix given caret package.","code":""},{"path":"/reference/getMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Measures for classification tasks — getMetrics","text":"","code":"getMetrics(y, yhat, classtype)"},{"path":"/reference/getMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance Measures for classification tasks — getMetrics","text":"y expression. class variable. yhat expression. vector predicted values. classtype character numeric. number levels y.","code":""},{"path":"/reference/getMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance Measures for classification tasks — getMetrics","text":"Outputs object performance measures calculated confusion matrix given caret package. data frame resulting output first column giving name performance measure, second column giving corresponding value.","code":""},{"path":"/reference/getMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performance Measures for classification tasks — getMetrics","text":"getMetrics works target variables two, three, four, six eight classes. function relies caret package obtain confusion matrix performance measures extracted. can run several algorithms, results combined one data frame easier comparison (see section 'Examples'). Predictions obtained beforehand used input yhat. predict.train function caret run without argument type obtaining predictions.","code":""},{"path":[]},{"path":"/reference/getMetrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performance Measures for classification tasks — getMetrics","text":"Zakaria Kehel, Bancy Ngatia, Khadija Aziz, Chafik Analy","code":""},{"path":"/reference/getMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance Measures for classification tasks — getMetrics","text":"","code":"if (FALSE) { # \\dontrun{ # Obtain predictions from previous models   data(septoriaDurumWC)   split.data <- splitData(septoriaDurumWC, seed = 1234, y = \"ST_S\", p = 0.7) data.train <- split.data$trainset data.test <- split.data$testset  knn.mod <- tuneTrain(data = septoriaDurumWC,y = 'ST_S',method = 'knn',positive = 'R') nnet.mod <- tuneTrain(data = septoriaDurumWC,y = 'ST_S',method = 'nnet',positive = 'R')   pred.knn <- predict(knn.mod$Model, newdata = data.test[ , -1]) pred.nnet <- predict(nnet.mod$Model, newdata = data.test[ , -1])  metrics.knn <- getMetrics(y = data.test$ST_S, yhat = pred.knn, classtype = 2) metrics.nnet <- getMetrics(y = data.test$ST_S, yhat = pred.nnet, classtype = 2) } # }"},{"path":"/reference/getMetricsPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance Measures with PCA pre-processing — getMetricsPCA","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"getMetricsPCA allows obtain performance measures Confusion Matrix algorithms PCA pre-processing,returns data frame containing performance measures confusion matrix given caret package algorithms run PCA pre-processing.","code":""},{"path":"/reference/getMetricsPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"","code":"getMetricsPCA(yhat, y, classtype, model)"},{"path":"/reference/getMetricsPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"yhat expression. vector predicted values. y expression. class variable. classtype character numeric. number levels y. model expression. model object output model assigned.","code":""},{"path":"/reference/getMetricsPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"Outputs object performance measures calculated confusion matrix given caret package. data frame resulting output first column giving name performance measure, second column giving corresponding value.","code":""},{"path":"/reference/getMetricsPCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"Works target variables two, three, four, six eight classes. Similar getMetrics used case models run PCA specified option preProcess argument train function caret.","code":""},{"path":[]},{"path":"/reference/getMetricsPCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"Khadija Aziz, Zainab Azough, Zakaria Kehel, Bancy Ngatia","code":""},{"path":"/reference/getMetricsPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance Measures with PCA pre-processing — getMetricsPCA","text":"","code":"if (FALSE) { # \\dontrun{  # Obtain predictions from several previously run models  dataX <- subset(data, select = -y)  pred.knn <- predict(model.knn, newdata = dataX)  pred.rf <- predict(model.rf, newdata = dataX)   # Get metrics for several algorithms  metrics.knn <- getMetricsPCA(y = data$y, yhat = pred.knn,                               classtype = 2, model = model.knn)  metrics.rf <- getMetricsPCA(y = data$y, yhat = pred.rf,                              classtype = 2, model = model.rf)   # Indexing for 2-class models to remove extra column with  # names of performance measures  metrics.all <- cbind(metrics.knn, metrics.rf[ , 2])   # No indexing needed for 3-, 4-, 6- or 8-class models  metrics.all <- cbind(metrics.knn, metrics.rf)  } # }"},{"path":"/reference/getOnset.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"function Extracts Daily values climatic variables remote ICARDA data based Onset Planting, returns list based specified climatic variables. variable 365 values day (onset) year beginning planting day.","code":""},{"path":"/reference/getOnset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"","code":"getOnset(sites, crop, var, cv = FALSE)"},{"path":"/reference/getOnset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"sites character. Names sites extract data. crop character. Crop code ICARDA database. See section 'Details' list crops. var character. Climatic variable(s) extracted. choices : tavg, prec, rh cv boolean. TRUE, returns data frame coefficient variation variable day onset year. Default: FALSE.","code":""},{"path":"/reference/getOnset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"object class \"data.frame\" specified climatic variables names sites. cv = TRUE, object list containing three data frames: first one average daily values climatic variables, second one daily coefficient variation climatic variable, third one phenotypic variables number day calendar year occurs sites specified sites. cv = FALSE, object list containing two data frames: first one average daily values climatic variables, second one phenotypic variables number day calendar year occurs sites specified sites.","code":""},{"path":"/reference/getOnset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"Similar getDaily except extracted data based 365 days starting onset planting. Crops available ICARDA's genebank documentation system include following: 'ICAG' Aegilops 'ICB' Barley 'ICBW' Bread wheat 'ILC' Chickpea 'ICDW' Durum wheat 'ILB' Faba bean 'BPL' Faba bean BPL 'IFMI' Forage range 'IFLA' Lathyrus 'ILL' Lentil 'IFMA' Medicago annual 'IC' mandate cereals 'IFPI' Pisum 'ICPW' Primitive wheat 'IFTR' Trifolium 'IFVI' Vicia 'ICWH' Wheat hybrids 'ICWW' Wheat wild relatives 'ILWC' Wild Cicer 'ICWB' Wild Hordeum 'ILWL' Wild Lens 'ICWT' Wild Triticum Alternatively, list available crops can fetched ICARDA's online server using getCrops.","code":""},{"path":[]},{"path":"/reference/getOnset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"Khadija Aouzal, Amal Ibnelhobyb, Zakaria Kehel, Bancy Ngatia","code":""},{"path":"/reference/getOnset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting Daily Climatic Variables Based on Onset of Planting — getOnset","text":"","code":"if (FALSE) { # \\dontrun{  # Extract onset data for durum wheat  durum <- getAccessions(crop = 'Durum wheat', coor = FALSE)  onset <- getOnset(sites = unique(durum$SiteCode), crop = 'ICDW',                    var = c('tavg', 'prec'), cv = TRUE)   # Get data frame with climatic variables from list object returned  onset.clim <- onset[[1]]   # Get data frame with coefficient of variation from list object  # returned (when cv = TRUE)  onset.cv <- onset[[2]]    # Get data frame with phenotypic variables from list object returned  onset.pheno <- onset[[3]]  } # }"},{"path":"/reference/getTraitsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"Return data frame observed values accessions associated Trait","code":""},{"path":"/reference/getTraitsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"","code":"getTraitsData(IG, traitID)"},{"path":"/reference/getTraitsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"IG factor. Unique identifier accession. traitID integer. Unique identifier trait (getCropTraits).","code":""},{"path":"/reference/getTraitsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"data frame scores trait specified traitID accessions given IG.","code":""},{"path":"/reference/getTraitsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"Possible inputs traitID can found using getCropTraits function (see section 'Examples').","code":""},{"path":"/reference/getTraitsData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"Khadija Aouzal, Amal Ibnelhobyb, Zakaria Kehel, Fawzy Nawar","code":""},{"path":"/reference/getTraitsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting Trait Values of Accessions for a Specific Trait — getTraitsData","text":"","code":"if (FALSE) { # \\dontrun{  # Check trait ID for septoria and get septoria data for durum wheat  durum <- getAccessions(crop = 'Durum wheat', coor = TRUE)  durumTraits <- getCropTraits(crop = 'Durum wheat')  septoria <- getTraitsData(IG = durum$IG, traitID = 145)  } # }"},{"path":"/reference/mapAccessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Accessions on Map — mapAccessions","title":"Plotting Accessions on Map — mapAccessions","text":"function returns map points showing accessions located.","code":""},{"path":"/reference/mapAccessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Accessions on Map — mapAccessions","text":"","code":"mapAccessions(df, long, lat, y = NULL)"},{"path":"/reference/mapAccessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Accessions on Map — mapAccessions","text":"df object class \"data.frame\" coordinates accessions target variable. long character. Column name df representing longitude. lat character. Column name df representing latitude. y Default: NULL, column name df representing target variable.","code":""},{"path":"/reference/mapAccessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Accessions on Map — mapAccessions","text":"world map plotted points showing locations accessions.","code":""},{"path":"/reference/mapAccessions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting Accessions on Map — mapAccessions","text":"Khadija Aouzal, Zakaria Kehel","code":""},{"path":"/reference/mapAccessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Accessions on Map — mapAccessions","text":"","code":"if (FALSE) { # \\dontrun{  # Loading FIGS subset for wheat sodicity resistance  data(FIGS)  # World Map showing locations of accessions  mapAccessions(df = FIGS, long = \"Longitude\", lat = \"Latitude\")    # Map plotting locations of accessions with points coloured   # based on a gradient scale of SodicityIndex values  mapAccessions(FIGS, long = \"Longitude\", lat = \"Latitude\",                 y = \"SodicityIndex\")  # Map plotting locations of accessions with points  # coloured based on levels of y   mapAccessions(FIGS, long = \"Longitude\", lat = \"Latitude\",   y = \"PopulationType\")  } # }"},{"path":"/reference/modelingSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get modeling metrics — modelingSummary","title":"Get modeling metrics — modelingSummary","text":"modelingSummary automatic function modeling data, returns dataframe containing metrics modeling using five machine learning algorithms: KNN, SVM, RF, NNET, Bcart. function based spliData, tuneTrain, predict, getMetrics functions.","code":""},{"path":"/reference/modelingSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get modeling metrics — modelingSummary","text":"","code":"modelingSummary(   data,   y,   p = 0.7,   length = 10,   control = \"repeatedcv\",   number = 10,   repeats = 10,   process = c(\"center\", \"scale\"),   summary = multiClassSummary,   positive,   parallelComputing = FALSE,   classtype,   ... )"},{"path":"/reference/modelingSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get modeling metrics — modelingSummary","text":"data object class \"data.frame\" target variable predictor variables. y character. Target variable. p numeric. Proportion data used training. Default: 0.7 length integer. Number values output tuning parameter. search = \"random\" passed trainControl ..., becomes maximum number tuning parameter combinations generated random search. Default: 10. control character. Resampling method use. Choices include: \"boot\", \"boot632\", \"optimism_boot\", \"boot_all\", \"cv\", \"repeatedcv\", \"LOOCV\", \"LGOCV\", \"none\", \"oob\", timeslice, \"adaptive_cv\", \"adaptive_boot\", \"adaptive_LGOCV\". Default: \"repeatedcv\". See train specific details resampling methods. number integer. Number cross-validation folds number resampling iterations. Default: 10. repeats integer. Number folds repeated k-fold cross-validation \"repeatedcv\" chosen resampling method control. Default: 10. process character. Defines pre-processing transformation predictor variables done. Options : \"BoxCox\", \"YeoJohnson\", \"expoTrans\", \"center\", \"scale\", \"range\", \"knnImpute\", \"bagImpute\", \"medianImpute\", \"pca\", \"ica\", \"spatialSign\". See preProcess specific details pre-processing transformation. Default: c('center', 'scale'). summary expression. Computes performance metrics across resamples. numeric y, mean squared error R-squared calculated. factor y, overall accuracy Kappa calculated. See trainControl defaultSummary details specification summary options. Default: multiClassSummary. positive character. positive class target variable y factor. Usually, first level factor. parallelComputing logical. indicates whether also use parallel processing. Default: False classtype integer.indicates number classes traits. ... additional arguments passed createDataPartition, trainControl train functions package caret.","code":""},{"path":"/reference/modelingSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get modeling metrics — modelingSummary","text":"dataframe contains metrics modeling five machine learning algorithms: KNN, SVM, RF, NNET, Bcart. tuneTrain relies package caret perform modeling.","code":""},{"path":"/reference/modelingSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get modeling metrics — modelingSummary","text":"Types classification regression models available use tuneTrain can found using names(getModelInfo()). results given depend type model used.","code":""},{"path":[]},{"path":"/reference/modelingSummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get modeling metrics — modelingSummary","text":"Zakaria Kehel, Khadija Aziz","code":""},{"path":"/reference/modelingSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get modeling metrics — modelingSummary","text":"","code":"if (FALSE) { # \\dontrun{  data(septoriaDurumWC)  models <- modelingSummary(data = septoriaDurumWC, y = \"ST_S\", positive = \"R\", classtype = 2) } # }"},{"path":"/reference/septoriaDurumWC.html","id":null,"dir":"Reference","previous_headings":"","what":"septoriaDurumWC — septoriaDurumWC","title":"septoriaDurumWC — septoriaDurumWC","text":"sample data including daily data 4 climatic variables (tmin, tmax, precipitation relative humidity) evaluation Septoria Tritici","code":""},{"path":"/reference/septoriaDurumWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"septoriaDurumWC — septoriaDurumWC","text":"","code":"data(\"septoriaDurumWC\")"},{"path":"/reference/septoriaDurumWC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"septoriaDurumWC — septoriaDurumWC","text":"200 sites durum wheat collection daily climatic data evaluation Septoria Tritici.","code":""},{"path":"/reference/septoriaDurumWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"septoriaDurumWC — septoriaDurumWC","text":"","code":"if(interactive()){  #Load durum wheat data with septoria scores and climatic variables obtained from WorldClim database  data(\"septoriaDurumWC\") }"},{"path":"/reference/splitData.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting Data — splitData","title":"Splitting Data — splitData","text":"function splits Data Train Test Sets, returns list containing two data frames train test sets.","code":""},{"path":"/reference/splitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting Data — splitData","text":"","code":"splitData(data, seed = NULL, y, p, ...)"},{"path":"/reference/splitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting Data — splitData","text":"data object class \"data.frame\" target variable predictor variables. seed integer. Values random number generator. Default: NULL. y character. Target variable. p numeric. Proportion data used training. ... additional arguments passed createDataPartition function caret package control way data split.","code":""},{"path":"/reference/splitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting Data — splitData","text":"list two data frames: first train set, second test set.","code":""},{"path":"/reference/splitData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splitting Data — splitData","text":"splitData relies createDataPartition function caret package perform data split. y factor, sampling observations set done within levels y class distributions less balanced set. y numeric, data split groups based percentiles sampling done within subgroups. See createDataPartition details additional arguments can passed.","code":""},{"path":[]},{"path":"/reference/splitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Splitting Data — splitData","text":"Zakaria Kehel, Bancy Ngatia","code":""},{"path":"/reference/splitData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splitting Data — splitData","text":"","code":"if (FALSE) { # \\dontrun{  # Split the data into 70/30 train and test sets for factor y  data(septoriaDurumWC)  split.data <- splitData(septoriaDurumWC, seed = 1234,                          y = 'ST_S', p = 0.7)   # Get training and test sets from list object returned  trainset <- split.data$trainset  testset <- split.data$testset } # }"},{"path":"/reference/tuneTrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"Automatic function tuning training data, returns list containing model objects, data frame plot.","code":""},{"path":"/reference/tuneTrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"","code":"tuneTrain(   data,   y,   p = 0.7,   method = \"knn\",   imbalanceMethod = NULL,   imbalanceThreshold = 0.2,   parallelComputing = FALSE,   control = \"repeatedcv\",   Length = 10,   number = 10,   repeats = 10,   process = c(\"center\", \"scale\"),   summary = multiClassSummary,   classProbs = FALSE,   ... )"},{"path":"/reference/tuneTrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"data object class \"data.frame\" target variable predictor variables. y character. Target variable. p numeric. Proportion data used training. Default: 0.7 method character. Type model use classification regression. imbalanceMethod Method handling imbalanced data (\"\", \"\"). Default: NULL. imbalanceThreshold Threshold determine data imbalanced (numeric 0 0.4). Default: 0.2. parallelComputing logical. indicates whether also use parallel processing. Default: False control character. Resampling method use. Choices include: \"boot\", \"boot632\", \"optimism_boot\", \"boot_all\", \"cv\", \"repeatedcv\", \"LOOCV\", \"LGOCV\", \"none\", \"oob\", timeslice, \"adaptive_cv\", \"adaptive_boot\", \"adaptive_LGOCV\". Default: \"repeatedcv\". See train specific details resampling methods. Length integer. Number values output tuning parameter. search = \"random\" passed trainControl ..., becomes maximum number tuning parameter combinations generated random search. Default: 10. number integer. Number cross-validation folds number resampling iterations. Default: 10. repeats integer. Number folds repeated k-fold cross-validation \"repeatedcv\" chosen resampling method control. Default: 10. process character. Defines pre-processing transformation predictor variables done. Options : \"BoxCox\", \"YeoJohnson\", \"expoTrans\", \"center\", \"scale\", \"range\", \"knnImpute\", \"bagImpute\", \"medianImpute\", \"pca\", \"ica\", \"spatialSign\". See preProcess specific details pre-processing transformation. Default: c('center', 'scale'). summary expression. Computes performance metrics across resamples. numeric y, mean squared error R-squared calculated. factor y, overall accuracy Kappa calculated. See trainControl defaultSummary details specification summary options. Default: multiClassSummary. classProbs logical (default : TRUE assuming classification task). set FALSE regression tasks conjunction summary argument set \"defaultSummary\". See examples details. ... additional arguments passed createDataPartition, trainControl train functions package caret.","code":""},{"path":"/reference/tuneTrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"list object results tuning training model selected method, together predictions class probabilities. training test data sets obtained splitting data also returned addition model quality metrics preformance plots. y factor, class probabilities calculated class. y numeric, predicted values calculated. ROC curve created y factor. Otherwise, plot residuals versus predicted values created y numeric. tuneTrain relies packages caret, ggplot2 pROC perform modelling plotting.","code":""},{"path":"/reference/tuneTrain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"Types classification regression models available use tuneTrain can found using names(getModelInfo()). results given depend type model used. addition Model object, Model quality, Tuning training datasets,classification models, class probabilities ROC curve given results. regression models, Variable importance, predictions residuals versus predicted plot given. y converted either factor performing classification numeric performing regression specifying tuneTrain. Imbalance handling methods \"\" \"\" use ,respectively, upsample() downsample() caret subsampling methods.","code":""},{"path":[]},{"path":"/reference/tuneTrain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"Zakaria Kehel, Bancy Ngatia, Khadija Aziz, Chafik Analy","code":""},{"path":"/reference/tuneTrain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splitting the Data, Tuning and Training the models, and making predictions — tuneTrain","text":"","code":"if (FALSE) { # \\dontrun{ # Reading local test datasets data(DurumWheatDHEWC) data(BarleyRNOWC) data(septoriaDurumWC)  ## Binary classification of ST_S with balanced data tree.ST_S <- tuneTrain(data = as.data.frame(septoriaDurumWC),                      y =  'ST_S',                      method = 'treebag',                      summary = multiClassSummary,                      repeats = 3,                      classProbs = TRUE)  ## Binary classification of RNO with imbalanced data knn.RNO <- tuneTrain(data = BarleyRNOWC,                      y =  'RNO',                      method = 'knn',                      summary = multiClassSummary,                      imbalanceMethod =\"up\",                      imbalanceThreshold = 0.2,                      process = c(\"scale\",\"center\"),                      classProbs = TRUE,                      repeats = 3)                        ## Regression of DHE svm.DHE <- tuneTrain(data = DurumWheatDHEWC,                      y =  'DHE',                      method = 'svmLinear2',                      summary = defaultSummary,                      classProbs = FALSE,                      repeats = 3)  } # }"},{"path":"/reference/varimpPred.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance and Predictions — varimpPred","title":"Variable Importance and Predictions — varimpPred","text":"varimpPred calculates variable importance makes predictions. returns list containing data frame variable importance scores, predictions class probabilities, corresponding plots.","code":""},{"path":"/reference/varimpPred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance and Predictions — varimpPred","text":"","code":"varimpPred(   newdata,   y,   positive = NULL,   model,   scale = FALSE,   auc = FALSE,   predict = FALSE,   type = \"prob\",   ... )"},{"path":"/reference/varimpPred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance and Predictions — varimpPred","text":"newdata data frame. test dataset. y character string. name target variable. positive character string. positive class target variable y factor. Default: NULL. model model object. trained model returned caret::train. scale logical value. TRUE, scales variable importance values 0-100. Default: FALSE. auc logical value. TRUE, calculates area ROC curve (AUC) classification models. Default: FALSE. predict logical value. TRUE, calculates predictions class probabilities. Default: FALSE. type character string. type prediction, e.g., \"prob\" \"raw\". Default: \"prob\". ... Additional arguments passed caret::varImp.","code":""},{"path":"/reference/varimpPred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable Importance and Predictions — varimpPred","text":"list containing variable importance scores, predictions, class probabilities, corresponding plots. classification models, class probabilities ROC curves included predict = TRUE. regression models, predictions residuals vs. predicted plots included predict = TRUE.","code":""},{"path":"/reference/varimpPred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Importance and Predictions — varimpPred","text":"function uses caret, ggplot2, plotROC calculations plotting. Variable importance calculated based type model. example, regression models, absolute value t-statistic parameter used importance calculation. classification models, variable importance score calculated class (except tree-based methods). See caret::varImp details.","code":""},{"path":[]},{"path":"/reference/varimpPred.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable Importance and Predictions — varimpPred","text":"Zakaria Kehel, Bancy Ngatia, Khadija Aziz, Zainab Azough, Chafik Analy","code":""},{"path":"/reference/varimpPred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance and Predictions — varimpPred","text":"","code":"if (FALSE) { # \\dontrun{   # Example for classification model   data(\"septoriaDurumWC\")   knn.mod <- caret::train(ST_S ~ ., data = septoriaDurumWC, method = \"knn\")   testdata <- septoriaDurumWC   knn.varimp <- varimpPred(newdata = testdata, y = \"ST_S\", positive = \"R\", model = knn.mod)   print(knn.varimp)    # Example with SVM and ROC curve   svm.mod <- caret::train(ST_S ~ ., data = septoriaDurumWC, method = \"svmLinear2\",    metric = \"Accuracy\")   testdata <- septoriaDurumWC   svm.varimp <- varimpPred(newdata = testdata, y = \"ST_S\", positive = \"R\", model = svm.mod,    auc = TRUE, predict = TRUE)   print(svm.varimp) } # }"}]
