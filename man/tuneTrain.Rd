% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tuneTrain.R
\name{tuneTrain}
\alias{tuneTrain}
\title{Splitting the Data, Tuning and Training the models, and making predictions}
\usage{
tuneTrain(
  data,
  y,
  p = 0.7,
  method = "knn",
  imbalanceMethod = NULL,
  imbalanceThreshold = 0.2,
  parallelComputing = FALSE,
  control = "repeatedcv",
  Length = 10,
  number = 10,
  repeats = 10,
  process = c("center", "scale"),
  summary = multiClassSummary,
  classProbs = FALSE,
  ...
)
}
\arguments{
\item{data}{object of class "data.frame" with target variable and predictor variables.}

\item{y}{character. Target variable.}

\item{p}{numeric. Proportion of data to be used for training. Default: 0.7}

\item{method}{character. Type of model to use for classification or regression.}

\item{imbalanceMethod}{Method for handling imbalanced data ("up", "down"). Default: NULL.}

\item{imbalanceThreshold}{Threshold to determine if data is imbalanced (numeric between 0 and 0.4). Default: 0.2.}

\item{parallelComputing}{logical. indicates whether to also use the parallel processing. Default: False}

\item{control}{character. Resampling method to use. Choices include: "boot", "boot632", "optimism_boot", "boot_all", "cv", "repeatedcv", "LOOCV", "LGOCV", "none", "oob", timeslice, "adaptive_cv", "adaptive_boot", or "adaptive_LGOCV". Default: "repeatedcv". See \code{\link[caret]{train}} for specific details on the resampling methods.}

\item{Length}{integer. Number of values to output for each tuning parameter. If \code{search = "random"} is passed to \code{\link[caret]{trainControl}} through \code{...}, this becomes the maximum number of tuning parameter combinations that are generated by the random search. Default: 10.}

\item{number}{integer. Number of cross-validation folds or number of resampling iterations. Default: 10.}

\item{repeats}{integer. Number of folds for repeated k-fold cross-validation if "repeatedcv" is chosen as the resampling method in \code{control}. Default: 10.}

\item{process}{character. Defines the pre-processing transformation of predictor variables to be done. Options are: "BoxCox", "YeoJohnson", "expoTrans", "center", "scale", "range", "knnImpute", "bagImpute", "medianImpute", "pca", "ica", or "spatialSign". See \code{\link[caret]{preProcess}} for specific details on each pre-processing transformation. Default: c('center', 'scale').}

\item{summary}{expression. Computes performance metrics across resamples. For numeric \code{y}, the mean squared error and R-squared are calculated. For factor \code{y}, the overall accuracy and Kappa are calculated. See \code{\link[caret]{trainControl}} and \code{\link[caret]{defaultSummary}} for details on specification and summary options. Default: multiClassSummary.}

\item{classProbs}{a logical (default : TRUE assuming classification task). It should be set to FALSE for regression tasks in conjunction with \code{summary} argument set to "defaultSummary". See examples for more details.}

\item{...}{additional arguments to be passed to \code{createDataPartition}, \code{trainControl} and \code{train} functions in the package \code{caret}.}
}
\value{
A list object with results from tuning and training the model selected in \code{method}, together with predictions and class probabilities. The training and test data sets obtained from splitting the data are also returned in addition to model quality metrics and preformance plots.

If \code{y} is factor, class probabilities are calculated for each class. If \code{y} is numeric, predicted values are calculated.

A ROC curve is created if \code{y} is factor. Otherwise, a plot of residuals versus predicted values is created if \code{y} is numeric.

\code{tuneTrain} relies on packages \code{caret}, \code{ggplot2} and \code{pROC} to perform the modelling and plotting.
}
\description{
Automatic function for tuning and training data, it returns a list containing a model objects, data frame and plot.
}
\details{
Types of classification and regression models available for use with \code{tuneTrain} can be found using \code{names(getModelInfo())}. The results given depend on the type of model used.

In addition to Model object, Model quality, Tuning and training datasets,For classification models, class probabilities and ROC curve are given in the results. For regression models, Variable importance, predictions and residuals versus predicted plot are given. \code{y} should be converted to either factor if performing classification or numeric if performing regression before specifying it in \code{tuneTrain}.

Imbalance handling methods "up" and "down" use ,respectively, upsample() and downsample() from caret subsampling methods.
}
\examples{
\dontrun{
# Reading local test datasets
data(DurumWheatDHEWC)
data(BarleyRNOWC)
data(septoriaDurumWC)

## Binary classification of ST_S with balanced data
tree.ST_S <- tuneTrain(data = as.data.frame(septoriaDurumWC),
                     y =  'ST_S',
                     method = 'treebag',
                     summary = multiClassSummary,
                     repeats = 3,
                     classProbs = TRUE)

## Binary classification of RNO with imbalanced data
knn.RNO <- tuneTrain(data = BarleyRNOWC,
                     y =  'RNO',
                     method = 'knn',
                     summary = multiClassSummary,
                     imbalanceMethod ="up",
                     imbalanceThreshold = 0.2,
                     process = c("scale","center"),
                     classProbs = TRUE,
                     repeats = 3)
                      
## Regression of DHE
svm.DHE <- tuneTrain(data = DurumWheatDHEWC,
                     y =  'DHE',
                     method = 'svmLinear2',
                     summary = defaultSummary,
                     classProbs = FALSE,
                     repeats = 3)
 }
}
\seealso{
\code{\link[caret]{createDataPartition}},
\code{\link[caret]{trainControl}},
\code{\link[caret]{train}},
\code{\link[caret]{predict.train}},
\code{\link[ggplot2]{ggplot}},
\code{\link[pROC]{auc}},
\code{\link[pROC]{roc}},
\code{\link[pROC]{ggroc}},
}
\author{
Zakaria Kehel, Bancy Ngatia, Khadija Aziz, Chafik Analy
}
